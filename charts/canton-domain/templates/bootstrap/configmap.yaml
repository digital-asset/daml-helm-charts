{{/* This script must be idempotent, it can run again even if domain and participant(s) are already initialized */}}
{{- if .Values.bootstrapHook.enabled }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "common.fullname" . }}-bootstrap
  labels: {{- include "common.labels" . | nindent 4 }}
    app.kubernetes.io/component: bootstrap
    {{- with .Values.commonLabels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
data:
  bootstrap.canton: |
    logger.info("Bootstrap script start")

    val domainManager = domainManagers.remote.head
    val mediator = mediators.remote.head
    val sequencer = sequencers.remote.head

    import com.digitalasset.canton.config.NonNegativeDuration

    logger.debug("Setting script commands timeout")
    console.set_command_timeout(NonNegativeDuration.ofSeconds(Duration({{ .Values.bootstrapHook.commandsTimeout | quote }}).toSeconds))

    nodes.remote.foreach { node =>
      logger.info(s"Waiting for ${node.name} to be running")
      node.health.wait_for_running()
    }

    logger.info(s"Bootstrapping domain ${domainManager.name}")
    domainManager.setup.bootstrap_domain(Seq(sequencer), Seq(mediator))

    {{ if .Values.testing.bootstrapHook.remoteParticipants -}}
    logger.info("Bootstrapping participant(s)")
    participants.remote.foreach { participant =>
      logger.info(s"Waiting for participant ${participant.name} to be initialized")
      participant.health.wait_for_initialized()

      {{- if .Values.manager.topology.open }}
      logger.warn(s"Your domain ${domainManager.name} is open, any participant can join ⚠️")
      {{- else }}
      if (domainManager.participants.list.exists(_.item.participant == participant.id)) {
        logger.info(s"Participant ${participant.name} already registered to domain ${domainManager.name}")
      } else {
        logger.info(s"Registering participant ${participant.name} to domain ${domainManager.name}")
        domainManager.participants.set_state(participant.id, ParticipantPermission.Submission, TrustLevel.Ordinary)
      }
      {{- end }}

      logger.info(s"Connecting participant ${participant.name} to domain ${domainManager.name} and sequencer(s) ${sequencer.name}")
      participant.domains.connect_multi(domainManager.name, Seq(sequencer))

      logger.info(s"Pinging participant ${participant.name} to make sure everything is alright")
      participant.health.ping(participant)
    }
    {{- end }}

    logger.info("Bootstrap script succeeded")
{{- end }}
