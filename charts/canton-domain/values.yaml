---
## @section Global parameters

## @param nameOverride String to partially override `common.name` template (will maintain the release name)
##
nameOverride: ""
## @param fullnameOverride String to fully override `common.fullname` template
##
fullnameOverride: ""

## @param image.registry Canton container image registry
## @param image.repository Canton container image repository
## @param image.tag Canton container image tag (immutable tags are recommended)
## @param image.digest Canton container image digest in the way `sha256:aa...`. If this parameter is set, overrides `image.tag`
## @param image.pullPolicy Canton container image pull policy. Allowed values: `Always`, `Never`, `IfNotPresent`
## @param image.pullSecrets Specify container registry existing secret names as an array
##
image:
  ## Private container image
  registry: digitalasset-docker.jfrog.io
  repository: canton-enterprise
  tag: ""
  digest: ""
  pullPolicy: IfNotPresent
  pullSecrets: []

## @param commonLabels Add labels to all the deployed resources
##
commonLabels: {}

## @extra certManager Cert-manager CSI driver defaults
## @param certManager.duration Requested certificates validity period. If empty `""` defaults to `720h`
## @param certManager.renewBefore Time to renew the certificate before expiry. If empty `""` defaults to a third of `duration`
## @param certManager.issuerGroup Issuer group. Allowed values: `cert-manager.io`, `cas-issuer.jetstack.io`, `cert-manager.k8s.cloudflare.com`, etc.
## @param certManager.issuerKind Issuer kind. Allowed values: `Issuer`, `ClusterIssuer`, `GoogleCASIssuer`, `OriginIssuer`, etc.
## @param certManager.fsGroup FS Group of mounted files, should be paired with and match container `runAsGroup`
##
certManager:
  duration: "87660h"
  renewBefore: "1h"
  issuerGroup: "cert-manager.io"
  issuerKind: "Issuer"
  fsGroup: 65532

## @param serviceAccount.create Enable creation of service accounts for pod(s)
## @param rbac.create Enable creation of RBAC resources attached to the service accounts
##
serviceAccount:
  create: true
rbac:
  create: true

metrics:
  ## @param metrics.enabled Enable Prometheus metrics endpoint
  ## @param metrics.podMonitor.enabled Creates a Prometheus Operator PodMonitor for all components (also requires `metrics.enabled` to be `true`)
  ##
  enabled: false
  podMonitor:
    enabled: false

## @section Global PostgreSQL configuration

storage:
  ## @param storage.host Server hostname
  ## @param storage.port Server port
  ## @param storage.database Database name
  ## @param storage.user User name
  ##
  host: "postgres"
  port: 5432
  database: "participant1"
  user: "canton"
  ## @param storage.existingSecret.name Name of existing secret with user credentials
  ## @param storage.existingSecret.key Name of key in existing secret with user password
  ## Secret must be manually created in the namespace
  ## If existingSecret.name is set: environment variable PGPASSWORD will be mounted from the scepcified secret/key
  ## Alternatively you can set key PGPASSWORD directly in environmentSecrets
  ##
  existingSecret:
    name: ""
    key: ""
  ## @param storage.ssl Enable TLS connection
  ## @param storage.sslMode TLS mode. Allowed values: `disable`, `allow`, `prefer`, `require`, `verify-ca`, `verify-full`
  ## @param storage.sslRootCert CA certificate file (PEM encoded X509v3). Intermediate certificate(s) that chain up to this root certificate can also appear in this file.
  ## @param storage.sslCert Client certificate file (PEM encoded X509v3)
  ## @param storage.sslKey Client certificate key file (PKCS-12 or PKCS-8 DER)
  ## @param storage.certificatesSecret Name of an existing K8s secret that contains certificate files, mounted to `/pgtls` if not empty, provide K8s secret key names as filenames
  ##
  ssl: true
  sslMode: "require"
  sslRootCert: ""
  sslCert: ""
  sslKey: ""
  certificatesSecret: ""
  ## @param storage.maxConnections Database connection pool maximum connections
  ##
  maxConnections: 10

## @section Bootstrap Hook configuration (not merged with `common` parameters)

## @extra bootstrapHook Initialize your domain and remote participant(s) listed in `testing.bootstrapHook.remoteParticipants`
## @param bootstrapHook.enabled Enable Job (Helm chart hook), will create one or more ephemeral Pods
## @param bootstrapHook.backoffLimit Specifies the number of retries before marking this job failed
## @param bootstrapHook.activeDeadlineSeconds Specifies the duration in seconds relative to the startTime that the job may be continuously active before the system tries to terminate it
## @param bootstrapHook.commandsTimeout Script commands timeout. Example values: `10s`, `10m' or `10h`
##
bootstrapHook:
  enabled: true
  backoffLimit: 2
  activeDeadlineSeconds: 600
  commandsTimeout: "1m"
  ## @extra bootstrapHook.logLevel Log4j logging levels. Allowed values: `TRACE`, `DEBUG`, `INFO`, `WARN` or `ERROR`
  ## @param bootstrapHook.logLevel.root Canton and external libraries, but not `stdout`
  ## @param bootstrapHook.logLevel.canton Only the Canton logger
  ## @param bootstrapHook.logLevel.stdout Usually the text displayed in the Canton console
  ##
  logLevel:
    root: "INFO"
    canton: "INFO"
    stdout: "INFO"
  ## @extra bootstrapHook.environment Environment variables (not merged with `common.environment`)
  ## @param bootstrapHook.environmentSecrets Secret environment variables (not merged with `common.environmentSecrets`)
  ## @param bootstrapHook.environment.JDK_JAVA_OPTIONS Java launcher environment variable
  ##
  environment:
    JDK_JAVA_OPTIONS: "-XX:InitialRAMPercentage=70 -XX:MaxRAMPercentage=70"
  environmentSecrets: {}
  ## @extra bootstrapHook.job Job and Helm hook configuration
  ## @param bootstrapHook.job.annotations Job extra annotations
  ## @param bootstrapHook.job.labels Job extra labels
  ## @param bootstrapHook.job.helmHook Annotation `helm.sh/hook` value
  ## @param bootstrapHook.job.helmHookWeight Annotation `helm.sh/hook-weight` value
  ## @param bootstrapHook.job.helmHookDeletePolicy Annotation `helm.sh/hook-delete-policy` value
  ## ref: https://helm.sh/docs/topics/charts_hooks/
  ##
  job:
    annotations: {}
    labels: {}
    helmHook: "post-install,post-upgrade"
    helmHookWeight: "5"
    helmHookDeletePolicy: "before-hook-creation"
  ## @param bootstrapHook.pod.annotations Extra annotations for bootstrap Job pods
  ## @param bootstrapHook.pod.labels Extra labels for bootstrap Job pods
  ## @param bootstrapHook.pod.securityContext.enabled Enable bootstrap Job pods Security Context
  ## @param bootstrapHook.pod.securityContext.fsGroup Special supplemental GID that applies to all containers in a pod
  ## @param bootstrapHook.pod.securityContext.fsGroupChangePolicy Defines behavior of changing ownership and permission of the volume before being exposed inside pods. Valid values are `OnRootMismatch` and `Always`
  ## @param bootstrapHook.pod.securityContext.sysctls List of namespaced sysctls used for the pod
  ##
  pod:
    annotations: {}
    labels: {}
    securityContext:
      enabled: true
      fsGroup: 65532
      fsGroupChangePolicy: "Always"
      sysctls: []
  ## @param bootstrapHook.securityContext.enabled Enable bootstrap container Security Context
  ## @param bootstrapHook.securityContext.readOnlyRootFilesystem Whether this container has a read-only root filesystem
  ## @param bootstrapHook.securityContext.runAsGroup The GID to run the entrypoint of the container process
  ## @param bootstrapHook.securityContext.runAsNonRoot Indicates that the container must run as a non-root user
  ## @param bootstrapHook.securityContext.runAsUser The UID to run the entrypoint of the container process
  ##
  securityContext:
    enabled: true
    readOnlyRootFilesystem: false
    runAsGroup: 65532
    runAsNonRoot: true
    runAsUser: 65532
  ## @param bootstrapHook.affinity Affinity for pods assignment
  ## @param bootstrapHook.nodeSelector Node labels for pods assignment
  ## @extra bootstrapHook.resources Resources requests/limits for bootstrap container
  ## @param bootstrapHook.tolerations Tolerations for pods assignment
  ##
  affinity: {}
  nodeSelector: {}
  resources:
    ## @skip bootstrapHook.resources.requests.cpu
    ## @skip bootstrapHook.resources.limits.cpu
    ## @skip bootstrapHook.resources.limits.memory
    requests:
      cpu: 100m
    limits:
      cpu: 1
      memory: 1Gi
  tolerations: []
  ## @param bootstrapHook.extraVolumeMounts Specify extra list of additional volumeMounts for bootstrap container
  ## @param bootstrapHook.extraVolumes Specify extra list of additional volumes for bootstrap pod
  ##
  extraVolumeMounts: []
  extraVolumes: []
  ## @param bootstrapHook.serviceAccount.annotations Service Account extra annotations
  ## @param bootstrapHook.serviceAccount.labels Service Account extra labels
  ## @param bootstrapHook.serviceAccount.automountServiceAccountToken API token automatically mounted into pods using this ServiceAccount. Set to `false` if pods do not use the K8s API
  ## @param bootstrapHook.serviceAccount.extraSecrets List of extra secrets allowed to be used by pods running using this ServiceAccount
  ##
  serviceAccount:
    annotations: {}
    labels: {}
    automountServiceAccountToken: false
    extraSecrets: []
  ## @param bootstrapHook.rbac.rules Custom RBAC rules to set
  ##
  rbac:
    rules: []

## @section Console configuration (not merged with `common` parameters)

## @extra console Single console pod for administration/debug of all the other components
## @param console.enabled Enable Deployment
##
console:
  enabled: false
  ## @param console.terminationGracePeriodSeconds Stop the pod immediately by default, tailing `/dev/null` to stay up
  ##
  terminationGracePeriodSeconds: 0
  ## @extra console.image Specific container image to be able to start a Canton console. Reusing `image.registry`, `image.pullPolicy` and `image.pullSecrets`
  ## @param console.image.repository Canton console container image repository
  ## @param console.image.tag Canton console container image tag (immutable tags are recommended)
  ## @param console.image.digest Canton console container image digest in the way `sha256:aa...`. If this parameter is set, overrides `image.tag`
  ##
  image:
    ## Private container image
    repository: canton-enterprise
    tag: ""
    digest: ""
  ## @extra console.environment Environment variables (not merged with `common.environment`)
  ## @param console.environmentSecrets Secret environment variables (not merged with `common.environmentSecrets`)
  ## @param console.environment.JDK_JAVA_OPTIONS Java launcher environment variable
  ##
  environment:
    JDK_JAVA_OPTIONS: "-XX:InitialRAMPercentage=70 -XX:MaxRAMPercentage=70"
  environmentSecrets: {}
  ## @param console.deployment.annotations Deployment extra annotations
  ## @param console.deployment.labels Deployment extra labels
  ## @param console.deployment.strategy Deployment strategy
  ##
  deployment:
    annotations: {}
    labels: {}
    strategy: {}
  ## @param console.pod.annotations Extra annotations for console Deployment pods
  ## @param console.pod.labels Extra labels for console Deployment pods
  ## @param console.pod.securityContext.enabled Enable console Deployment pods Security Context
  ## @param console.pod.securityContext.fsGroup Special supplemental GID that applies to all containers in a pod
  ## @param console.pod.securityContext.fsGroupChangePolicy Defines behavior of changing ownership and permission of the volume before being exposed inside pods. Valid values are `OnRootMismatch` and `Always`
  ## @param console.pod.securityContext.sysctls List of namespaced sysctls used for the pod
  ##
  pod:
    annotations: {}
    labels: {}
    securityContext:
      enabled: true
      fsGroup: 65532
      fsGroupChangePolicy: "Always"
      sysctls: []
  ## @param console.securityContext.enabled Enable console container Security Context
  ## @param console.securityContext.readOnlyRootFilesystem Whether this container has a read-only root filesystem
  ## @param console.securityContext.runAsGroup The GID to run the entrypoint of the container process
  ## @param console.securityContext.runAsNonRoot Indicates that the container must run as a non-root user
  ## @param console.securityContext.runAsUser The UID to run the entrypoint of the container process
  ##
  securityContext:
    enabled: true
    readOnlyRootFilesystem: false
    runAsGroup: 65532
    runAsNonRoot: true
    runAsUser: 65532
  ## @param console.affinity Affinity for pods assignment
  ## @param console.nodeSelector Node labels for pods assignment
  ## @extra console.resources Resources requests/limits for console container
  ## @param console.tolerations Tolerations for pods assignment
  ##
  affinity: {}
  nodeSelector: {}
  resources:
    ## @skip console.resources.requests.cpu
    ## @skip console.resources.limits.cpu
    ## @skip console.resources.limits.memory
    requests:
      cpu: 100m
    limits:
      cpu: 1
      memory: 1Gi
  tolerations: []
  ## @param console.extraVolumeMounts Specify extra list of additional volumeMounts for console container
  ## @param console.extraVolumes Specify extra list of additional volumes for console pod
  ##
  extraVolumeMounts: []
  extraVolumes: []
  ## @param console.serviceAccount.annotations Service Account extra annotations
  ## @param console.serviceAccount.labels Service Account extra labels
  ## @param console.serviceAccount.automountServiceAccountToken API token automatically mounted into pods using this ServiceAccount. Set to `false` if pods do not use the K8s API
  ## @param console.serviceAccount.extraSecrets List of extra secrets allowed to be used by pods running using this ServiceAccount
  ##
  serviceAccount:
    annotations: {}
    labels: {}
    automountServiceAccountToken: false
    extraSecrets: []
  ## @param console.rbac.rules Custom RBAC rules to set
  ##
  rbac:
    rules: []

common:
  ## @section Common parameters for all components
  ##
  ## @param common.domainName Mandatory Canton Domain name
  ## @param common.mediatorName Mandatory Canton Mediator name
  ## @param common.sequencerName Mandatory Canton Sequencer name
  ##
  domainName: "mydomain"
  mediatorName: "mymediator"
  sequencerName: "mysequencer"
  ## @param common.logEncoder Logging encoder. Allowed values: `plain`, `json`
  ##
  logEncoder: "plain"
  ## @extra common.tls TLS configuration
  ##
  tls:
    public:
      ## @param common.tls.public.enabled Enable TLS on sequencer public API (gRPC)
      ##
      enabled: false
      ## @extra common.tls.public.certManager Cert-manager CSI driver configuration (only used when TLS is enabled and `issuerName` is defined), will automatically mount certificates in folder `/tls-public`
      ## @param common.tls.public.certManager.issuerGroup Issuer group, defaults to `certManager.issuerGroup` if empty
      ## @param common.tls.public.certManager.issuerKind Issuer kind, defaults to `certManager.issuerKind` if empty
      ## @param common.tls.public.certManager.issuerName Issuer name
      ##
      certManager:
        issuerGroup: ""
        issuerKind: ""
        issuerName: ""
      ## @param common.tls.public.ca CA certificate, if empty `""` JVM default trust store is used
      ## @param common.tls.public.chain Certificate chain
      ## @param common.tls.public.key Certificate private key (PKCS-8)
      ##
      ca: "/tls-public/ca.crt"
      chain: "/tls-public/tls.crt"
      key: "/tls-public/tls.key"
      ## @param common.tls.public.minimumServerProtocolVersion Minimum version allowed: `TLSv1.2` or `TLSv1.3`. If empty `""` JVM defaults are used [[documentation]](https://www.java.com/en/configure_crypto.html)
      ## @param common.tls.public.ciphers Specify ciphers allowed, if empty `""` JVM defaults are used [[documentation]](https://www.java.com/en/configure_crypto.html)
      ## Configuration recommended by Mozilla: https://wiki.mozilla.org/Security/Server_Side_TLS
      ##
      minimumServerProtocolVersion: "TLSv1.3"
      ciphers:
        - "TLS_AES_128_GCM_SHA256"
        - "TLS_AES_256_GCM_SHA384"
        - "TLS_CHACHA20_POLY1305_SHA256"
    admin:
      ## @param common.tls.admin.enabled Enable TLS on admin API (gRPC)
      ##
      enabled: false
      ## @extra common.tls.admin.certManager Cert-manager CSI driver configuration (only used when TLS is enabled and `issuerName` is defined), will automatically mount certificates in folder `/tls-admin`
      ## @param common.tls.admin.certManager.issuerGroup Issuer group, defaults to `certManager.issuerGroup` if empty
      ## @param common.tls.admin.certManager.issuerKind Issuer kind, defaults to `certManager.issuerKind` if empty
      ## @param common.tls.admin.certManager.issuerName Issuer name
      ##
      certManager:
        issuerGroup: ""
        issuerKind: ""
        issuerName: ""
      ## @param common.tls.admin.ca CA certificate, if empty `""` JVM default trust store is used
      ## @param common.tls.admin.chain Certificate chain
      ## @param common.tls.admin.key Certificate private key (PKCS-8)
      ##
      ca: "/tls-admin/ca.crt"
      chain: "/tls-admin/tls.crt"
      key: "/tls-admin/tls.key"
      ## @param common.tls.admin.minimumServerProtocolVersion Minimum version allowed: `TLSv1.2` or `TLSv1.3`. If empty `""` JVM defaults are used [[documentation]](https://www.java.com/en/configure_crypto.html)
      ## @param common.tls.admin.ciphers Specify ciphers allowed, if empty `""` JVM defaults are used [[documentation]](https://www.java.com/en/configure_crypto.html)
      ## Configuration recommended by Mozilla: https://wiki.mozilla.org/Security/Server_Side_TLS
      ##
      minimumServerProtocolVersion: "TLSv1.3"
      ciphers:
        - "TLS_AES_128_GCM_SHA256"
        - "TLS_AES_256_GCM_SHA384"
        - "TLS_CHACHA20_POLY1305_SHA256"

  ## @extra common.mtls mTLS configuration
  ##
  mtls:
    admin:
      ## @param common.mtls.admin.enabled Define whether clients need to authenticate as well using mTLS
      ##
      enabled: false
      ## @extra common.mtls.admin.certManager Cert-manager CSI driver configuration (only used when TLS is enabled and `issuerName` is defined), will automatically mount certificates in folder `/mtls-admin`
      ## @param common.mtls.admin.certManager.issuerGroup Issuer group, defaults to `certManager.issuerGroup` if empty
      ## @param common.mtls.admin.certManager.issuerKind Issuer kind, defaults to `certManager.issuerKind` if empty
      ## @param common.mtls.admin.certManager.issuerName Issuer name
      ##
      certManager:
        issuerGroup: ""
        issuerKind: ""
        issuerName: ""
      ## @param common.mtls.admin.ca CA certificate, if empty `""` JVM default trust store is used
      ## @param common.mtls.admin.chain Certificate chain
      ## @param common.mtls.admin.key Certificate private key (PKCS-8)
      ##
      ca: "/mtls-admin/ca.crt"
      chain: "/mtls-admin/tls.crt"
      key: "/mtls-admin/tls.key"

  ## @section Common parameters for the `bootstrap` and `console` only
  ##
  ## @extra common.features Enable additional commands
  ## @param common.features.enablePreviewCommands Enable preview commands (unstable)
  ## @param common.features.enableTestingCommands Enable testing commands (for developers)
  ## @param common.features.enableRepairCommands Enable manual repair commands
  ##
  features:
    enablePreviewCommands: false
    enableTestingCommands: false
    enableRepairCommands: false

  ## @section Common parameters for the `manager`, `mediator` and `sequencer` only
  ##
  ## @extra common.logLevel Log4j logging levels. Allowed values: `TRACE`, `DEBUG`, `INFO`, `WARN` or `ERROR`
  ## @param common.logLevel.root Canton and external libraries, but not `stdout`
  ## @param common.logLevel.canton Only the Canton logger
  ## @param common.logLevel.stdout Usually the text displayed in the Canton console
  ##
  logLevel:
    root: "INFO"
    canton: "INFO"
    stdout: "INFO"
  ## @extra common.environment Environment variables
  ## @param common.environmentSecrets Secret environment variables
  ## @param common.environment.JDK_JAVA_OPTIONS Java launcher environment variable
  ##
  environment:
    JDK_JAVA_OPTIONS: "-XX:+ExitOnOutOfMemoryError -XX:InitialRAMPercentage=70 -XX:MaxRAMPercentage=70"
  environmentSecrets: {}
  ## @param common.pod.securityContext.enabled Enable pods Security Context
  ## @param common.pod.securityContext.fsGroup Special supplemental GID that applies to all containers in a pod
  ## @param common.pod.securityContext.fsGroupChangePolicy Defines behavior of changing ownership and permission of the volume before being exposed inside pods. Valid values are `OnRootMismatch` and `Always`
  ## @param common.pod.securityContext.sysctls List of namespaced sysctls used for the pod
  ##
  pod:
    securityContext:
      enabled: true
      fsGroup: 65532
      fsGroupChangePolicy: "Always"
      sysctls: []
  ## @param common.securityContext.enabled Enable containers Security Context
  ## @param common.securityContext.readOnlyRootFilesystem Whether this container has a read-only root filesystem
  ## @param common.securityContext.runAsGroup The GID to run the entrypoint of the container process
  ## @param common.securityContext.runAsNonRoot Indicates that the container must run as a non-root user
  ## @param common.securityContext.runAsUser The UID to run the entrypoint of the container process
  ##
  securityContext:
    enabled: true
    readOnlyRootFilesystem: false
    runAsGroup: 65532
    runAsNonRoot: true
    runAsUser: 65532
  ## @section Network Policy
  ##
  ## @param common.networkpolicy.enabled Enable Network Policy definitions
  ## @param common.networkpolicy.labels Network Policy extra labels
  networkpolicy:
    enabled: true
    labels: {}

## @section Domain Topology Manager configuration

manager:
  storage:
    ## @param manager.storage.database Manager database name
    ## @param manager.storage.user Manager user name
    ##
    database: "mydomain"
    user: "canton"
    ## @param manager.storage.existingSecret.name Name of existing secret with user credentials
    ## @param manager.storage.existingSecret.key Name of key in existing secret with user password
    ## Secret must be manually created in the namespace
    ## If existingSecret.name is set: environment variable PGPASSWORD will be mounted from the scepcified secret/key
    ## Alternatively you can set key PGPASSWORD directly in environmentSecrets
    ##
    existingSecret:
      name: ""
      key: ""
    ## @param manager.storage.maxConnections Database connection pool maximum connections
    ##
    maxConnections: 10
  ## @param manager.configOverride Raw Canton configuration file `canton { ... }`
  ## @param manager.bootstrapScript Raw Canton bootstrap script, automatically ran after node has started
  ##
  configOverride: ""
  bootstrapScript: ""
  ## @param manager.ports.admin Admin API container port (gRPC)
  ## @param manager.ports.health Health check port for gRPC liveness and readiness probes, not exposed (TLS always disabled)
  ## @param manager.ports.metrics Promotheus exporter container port (HTTP)
  ##
  ports:
    admin: 4801
    health: 4803
    metrics: 8081
  ## @param manager.replicaCount Number of Domain Topology Manager pods to deploy. Allowed values: `1` (active/passive HA, scaling up does not work)
  ## Domain Topology Manager is using active/passive HA which is incompatible with Kubernetes => run only one pod at a time
  ##
  replicaCount: 1
  ## @param manager.environment Environment variables,merged with `common.environment`
  ## @param manager.environmentSecrets Secret environment variables,merged with `common.environmentSecrets`
  ##
  environment: {}
  environmentSecrets: {}
  ## @param manager.deployment.annotations Deployment extra annotations
  ## @param manager.deployment.labels Deployment extra labels
  ## Deployment strategy is locked to "Recreate", Domain Topology Manager is using active/passive HA
  ## which is incompatible with Kubernetes => we run only one pod at a time
  ##
  deployment:
    annotations: {}
    labels: {}
  ## @param manager.pod.annotations Extra annotations for Deployment pods
  ## @param manager.pod.labels Extra labels for Deployment pods
  ##
  pod:
    annotations: {}
    labels: {}
  ## @param manager.affinity Affinity for pods assignment
  ## @param manager.nodeSelector Node labels for pods assignment
  ## @extra manager.resources Resources requests/limits for manager container
  ## @param manager.tolerations Tolerations for pods assignment
  ##
  affinity: {}
  nodeSelector: {}
  resources:
    ## @skip manager.resources.requests.cpu
    ## @skip manager.resources.limits.cpu
    ## @skip manager.resources.limits.memory
    requests:
      cpu: 200m
    limits:
      cpu: 1
      memory: 1Gi
  tolerations: []
  ## @param manager.livenessProbe Override `livenessProbe` default configuration
  ## @param manager.readinessProbe Override `readinessProbe` default configuration
  ##
  livenessProbe: {}
  readinessProbe: {}
  ## @param manager.service.type Service type. Allowed values: `ExternalName`, `ClusterIP`, `NodePort`, `LoadBalance`
  ## @param manager.service.annotations Service extra annotations
  ## @param manager.service.labels Service extra labels
  ## @param manager.service.ports.admin Admin API service port (gRPC)
  ## @param manager.service.ports.metrics Promotheus exporter service port (HTTP)
  ##
  service:
    type: ClusterIP
    annotations: {}
    labels: {}
    ports:
      admin: 4801
      metrics: 8081
  ## @param manager.extraVolumeMounts Specify extra list of additional volumeMounts for manager container
  ## @param manager.extraVolumes Specify extra list of additional volumes for manager pod
  ##
  extraVolumeMounts: []
  extraVolumes: []
  ## @param manager.topology.open `true`: domain is open, anyone who can connect to the sequencer can join<br />`false`: new participants are only accepted if their `ParticipantState` has already been registered
  ##
  topology:
    open: false
  ## @param manager.uniqueContractKeys Enable Unique Contract Keys (UCK) mode in your domain.<br />⚠️ This mode cannot be disabled once it has been enabled
  ##
  uniqueContractKeys: false
  ## @param manager.serviceAccount.annotations Service Account extra annotations
  ## @param manager.serviceAccount.labels Service Account extra labels
  ## @param manager.serviceAccount.automountServiceAccountToken API token automatically mounted into pods using this ServiceAccount. Set to `false` if pods do not use the K8s API
  ## @param manager.serviceAccount.extraSecrets List of extra secrets allowed to be used by pods running using this ServiceAccount
  ##
  serviceAccount:
    annotations: {}
    labels: {}
    automountServiceAccountToken: false
    extraSecrets: []
  ## @param manager.rbac.rules Custom RBAC rules to set
  ##
  rbac:
    rules: []
  ## @param manager.podMonitor.labels Pod Monitor extra labels
  ## @param manager.podMonitor.jobLabel The label to use to retrieve the job name from
  ## @param manager.podMonitor.podTargetLabels PodTargetLabels transfers labels on the Kubernetes Pod onto the target
  ## @param manager.podMonitor.extraPodMetricsEndpoints Extra scrapeable endpoint configuration
  ## @param manager.podMonitor.sampleLimit Per-scrape limit on number of scraped samples that will be accepted
  ## @param manager.podMonitor.targetLimit Limit on the number of scraped targets that will be accepted
  ## @param manager.podMonitor.labelLimit Per-scrape limit on number of labels that will be accepted for a sample (Prometheus versions 2.27 and newer)
  ## @param manager.podMonitor.labelNameLengthLimit Per-scrape limit on length of labels name that will be accepted for a sample (Prometheus versions 2.27 and newer)
  ## @param manager.podMonitor.labelValueLengthLimit Per-scrape limit on length of labels value that will be accepted for a sample (Prometheus versions 2.27 and newer)
  ##
  podMonitor:
    labels: {}
    jobLabel: ""
    podTargetLabels: []
    extraPodMetricsEndpoints: []
    sampleLimit: 0
    targetLimit: 0
    labelLimit: 0
    labelNameLengthLimit: 0
    labelValueLengthLimit: 0

## @section Mediator configuration

mediator:
  storage:
    ## @param mediator.storage.database Mediator database name
    ## @param mediator.storage.user Mediator user name
    ##
    database: "mymediator"
    user: "canton"
    ## @param mediator.storage.existingSecret.name Name of existing secret with user credentials
    ## @param mediator.storage.existingSecret.key Name of key in existing secret with user password
    ## Secret must be manually created in the namespace
    ## If existingSecret.name is set: environment variable PGPASSWORD will be mounted from the scepcified secret/key
    ## Alternatively you can set key PGPASSWORD directly in environmentSecrets
    ##
    existingSecret:
      name: ""
      key: ""
    ## @param mediator.storage.maxConnections Database connection pool maximum connections
    ##
    maxConnections: 10
  ## @param mediator.configOverride Raw Canton configuration file `canton { ... }`
  ## @param mediator.bootstrapScript Raw Canton bootstrap script, automatically ran after node has started
  ##
  configOverride: ""
  bootstrapScript: ""
  ## @param mediator.ports.admin Admin API container port (gRPC)
  ## @param mediator.ports.health Health check port for gRPC liveness and readiness probes, not exposed (TLS always disabled)
  ## @param mediator.ports.metrics Promotheus exporter container port (HTTP)
  ##
  ports:
    admin: 4602
    health: 4603
    metrics: 8081
  ## @param mediator.replicaCount Number of Mediator pods to deploy. Allowed values: `1` (active/passive HA, scaling up does not work)
  ## Mediator is using active/passive HA which is incompatible with Kubernetes => run only one pod at a time
  ##
  replicaCount: 1
  ## @param mediator.environment Environment variables,merged with `common.environment`
  ## @param mediator.environmentSecrets Secret environment variables,merged with `common.environmentSecrets`
  ##
  environment: {}
  environmentSecrets: {}
  ## @param mediator.deployment.annotations Deployment extra annotations
  ## @param mediator.deployment.labels Deployment extra labels
  ## Deployment strategy is locked to "Recreate", Mediator is using active/passive HA
  ## which is incompatible with Kubernetes => we run only one pod at a time
  ##
  deployment:
    annotations: {}
    labels: {}
  ## @param mediator.pod.annotations Extra annotations for Deployment pods
  ## @param mediator.pod.labels Extra labels for Deployment pods
  ##
  pod:
    annotations: {}
    labels: {}
  ## @param mediator.affinity Affinity for pods assignment
  ## @param mediator.nodeSelector Node labels for pods assignment
  ## @extra mediator.resources Resources requests/limits for manager container
  ## @param mediator.tolerations Tolerations for pods assignment
  ##
  affinity: {}
  nodeSelector: {}
  resources:
    ## @skip mediator.resources.requests.cpu
    ## @skip mediator.resources.limits.cpu
    ## @skip mediator.resources.limits.memory
    requests:
      cpu: 200m
    limits:
      cpu: 1
      memory: 1Gi
  tolerations: []
  ## @param mediator.livenessProbe Override `livenessProbe` default configuration
  ## @param mediator.readinessProbe Override `readinessProbe` default configuration
  ##
  livenessProbe: {}
  readinessProbe: {}
  ## @param mediator.service.type Service type. Allowed values: `ExternalName`, `ClusterIP`, `NodePort`, `LoadBalance`
  ## @param mediator.service.annotations Service extra annotations
  ## @param mediator.service.labels Service extra labels
  ## @param mediator.service.ports.admin Admin API service port (gRPC)
  ## @param mediator.service.ports.metrics Promotheus exporter service port (HTTP)
  ##
  service:
    type: ClusterIP
    annotations: {}
    labels: {}
    ports:
      admin: 4602
      metrics: 8081
  ## @param mediator.extraVolumeMounts Specify extra list of additional volumeMounts for mediator container
  ## @param mediator.extraVolumes Specify extra list of additional volumes for mediator pod
  ##
  extraVolumeMounts: []
  extraVolumes: []
  ## @param mediator.serviceAccount.annotations Service Account extra annotations
  ## @param mediator.serviceAccount.labels Service Account extra labels
  ## @param mediator.serviceAccount.automountServiceAccountToken API token automatically mounted into pods using this ServiceAccount. Set to `false` if pods do not use the K8s API
  ## @param mediator.serviceAccount.extraSecrets List of extra secrets allowed to be used by pods running using this ServiceAccount
  ##
  serviceAccount:
    annotations: {}
    labels: {}
    automountServiceAccountToken: false
    extraSecrets: []
  ## @param mediator.rbac.rules Custom RBAC rules to set
  ##
  rbac:
    rules: []
  ## @param mediator.podMonitor.labels Pod Monitor extra labels
  ## @param mediator.podMonitor.jobLabel The label to use to retrieve the job name from
  ## @param mediator.podMonitor.podTargetLabels PodTargetLabels transfers labels on the Kubernetes Pod onto the target
  ## @param mediator.podMonitor.extraPodMetricsEndpoints Extra scrapeable endpoint configuration
  ## @param mediator.podMonitor.sampleLimit Per-scrape limit on number of scraped samples that will be accepted
  ## @param mediator.podMonitor.targetLimit Limit on the number of scraped targets that will be accepted
  ## @param mediator.podMonitor.labelLimit Per-scrape limit on number of labels that will be accepted for a sample (Prometheus versions 2.27 and newer)
  ## @param mediator.podMonitor.labelNameLengthLimit Per-scrape limit on length of labels name that will be accepted for a sample (Prometheus versions 2.27 and newer)
  ## @param mediator.podMonitor.labelValueLengthLimit Per-scrape limit on length of labels value that will be accepted for a sample (Prometheus versions 2.27 and newer)
  ##
  podMonitor:
    labels: {}
    jobLabel: ""
    podTargetLabels: []
    extraPodMetricsEndpoints: []
    sampleLimit: 0
    targetLimit: 0
    labelLimit: 0
    labelNameLengthLimit: 0
    labelValueLengthLimit: 0

## @section Sequencer configuration

sequencer:
  ## @param sequencer.type Sequencer type
  ##
  type: "database"
  storage:
    ## @param sequencer.storage.database Sequencer database name
    ## @param sequencer.storage.user Sequencer user name
    ##
    database: "mysequencer"
    user: "canton"
    ## @param sequencer.storage.existingSecret.name Name of existing secret with user credentials
    ## @param sequencer.storage.existingSecret.key Name of key in existing secret with user password
    ## Secret must be manually created in the namespace
    ## If existingSecret.name is set: environment variable PGPASSWORD will be mounted from the scepcified secret/key
    ## Alternatively you can set key PGPASSWORD directly in environmentSecrets
    ##
    existingSecret:
      name: ""
      key: ""
    ## @param sequencer.storage.maxConnections Database connection pool maximum connections
    ##
    maxConnections: 10
  ## @param sequencer.config Sequencer extra configuration, to use along a custom `sequencer.type`
  ##
  config: ""
  ## @param sequencer.configOverride Raw Canton configuration file `canton { ... }`
  ## @param sequencer.bootstrapScript Raw Canton bootstrap script, automatically ran after node has started
  ##
  configOverride: ""
  bootstrapScript: ""
  ## @param sequencer.ports.public Ledger API container port (gRPC)
  ## @param sequencer.ports.admin Admin API container port (gRPC)
  ## @param sequencer.ports.health Health check port for gRPC liveness and readiness probes, not exposed (TLS always disabled)
  ## @param sequencer.ports.metrics Promotheus exporter container port (HTTP)
  ##
  ports:
    public: 4401
    admin: 4402
    health: 4403
    metrics: 8081
  ## @param sequencer.replicaCount Number of Sequencer pods to deploy
  ##
  replicaCount: 2
  ## @param sequencer.environment Environment variables,merged with `common.environment`
  ## @param sequencer.environmentSecrets Secret environment variables,merged with `common.environmentSecrets`
  ##
  environment: {}
  environmentSecrets: {}
  ## @param sequencer.deployment.annotations Deployment extra annotations
  ## @param sequencer.deployment.labels Deployment extra labels
  ## @param sequencer.deployment.strategy Deployment strategy
  ##
  deployment:
    annotations: {}
    labels: {}
    strategy: {}
  ## @param sequencer.pod.annotations Extra annotations for Deployment pods
  ## @param sequencer.pod.labels Extra labels for Deployment pods
  ##
  pod:
    annotations: {}
    labels: {}
  ## @param sequencer.affinity Affinity for pods assignment
  ## @param sequencer.nodeSelector Node labels for pods assignment
  ## @extra sequencer.resources Resources requests/limits for manager container
  ## @param sequencer.tolerations Tolerations for pods assignment
  ##
  affinity: {}
  nodeSelector: {}
  resources:
    ## @skip sequencer.resources.requests.cpu
    ## @skip sequencer.resources.limits.cpu
    ## @skip sequencer.resources.limits.memory
    requests:
      cpu: 500m
    limits:
      cpu: 2
      memory: 3Gi
  tolerations: []
  ## @param sequencer.livenessProbe Override `livenessProbe` default configuration
  ## @param sequencer.readinessProbe Override `readinessProbe` default configuration
  ##
  livenessProbe: {}
  readinessProbe: {}
  ## @param sequencer.service.type Service type. Allowed values: `ExternalName`, `ClusterIP`, `NodePort`, `LoadBalance`
  ## @param sequencer.service.annotations Service extra annotations
  ## @param sequencer.service.labels Service extra labels
  ## @param sequencer.service.ports.public Ledger API service port (gRPC)
  ## @param sequencer.service.ports.admin Admin API service port (gRPC)
  ## @param sequencer.service.ports.metrics Promotheus exporter service port (HTTP)
  ##
  service:
    type: ClusterIP
    annotations: {}
    labels: {}
    ports:
      public: 4401
      admin: 4402
      metrics: 8081
    ## @param sequencer.service.sessionAffinity.enabled Enable `ClientIP` based session affinity
    ## @param sequencer.service.sessionAffinity.timeout Session timeout in seconds. Between `1` and `86400`
    ##
    sessionAffinity:
      enabled: true
      timeout: 3600
  ## @param sequencer.extraVolumeMounts Specify extra list of additional volumeMounts for sequencer container
  ## @param sequencer.extraVolumes Specify extra list of additional volumes for sequencer pod
  ##
  extraVolumeMounts: []
  extraVolumes: []
  ## @param sequencer.ingress.enabled Enable ingress to sequencer service port `public` (gRPC)
  ## @param sequencer.ingress.annotations Ingress extra annotations
  ## @param sequencer.ingress.labels Ingress extra labels
  ## @param sequencer.ingress.className Set `ingressClassName` on the ingress record
  ## @param sequencer.ingress.host Fully qualified domain name of a network host
  ## @param sequencer.ingress.path Path to sequencer **public API**
  ## @param sequencer.ingress.pathType Determines the interpretation of the `Path` matching.  Allowed values: `Exact`, `Prefix`, `ImplementationSpecific`
  ## @param sequencer.ingress.tls Enable TLS configuration for `hostname`
  ##
  ingress:
    enabled: false
    annotations: {}
    labels: {}
    className: ""
    host: ""
    path: "/"
    pathType: "Prefix"
    tls: []
  ## @param sequencer.ingressRouteTCP.enabled Enable Traefik `IngressRouteTCP` (CRD) to sequencer service port `public` (gRPC)
  ## @param sequencer.ingressRouteTCP.annotations IngressRouteTCP extra annotations
  ## @param sequencer.ingressRouteTCP.labels IngressRouteTCP extra labels
  ## @param sequencer.ingressRouteTCP.entryPoints Traefik entrypoints for this IngressRouteTCP. Available by default: `web` (port 80), `websecure` (port 443)
  ## @param sequencer.ingressRouteTCP.hostSNI DNS record to cluster load balancer
  ## @param sequencer.ingressRouteTCP.tls Define TLS certificate configuration
  ##
  ingressRouteTCP:
    enabled: false
    annotations: {}
    labels: {}
    entryPoints:
      - websecure
    hostSNI: ""
    tls: {}
  ## @param sequencer.serviceAccount.annotations Service Account extra annotations
  ## @param sequencer.serviceAccount.labels Service Account extra labels
  ## @param sequencer.serviceAccount.automountServiceAccountToken API token automatically mounted into pods using this ServiceAccount. Set to `false` if pods do not use the K8s API
  ## @param sequencer.serviceAccount.extraSecrets List of extra secrets allowed to be used by pods running using this ServiceAccount
  ##
  serviceAccount:
    annotations: {}
    labels: {}
    automountServiceAccountToken: false
    extraSecrets: []
  ## @param sequencer.rbac.rules Custom RBAC rules to set
  ##
  rbac:
    rules: []
  ## @param sequencer.podMonitor.labels Pod Monitor extra labels
  ## @param sequencer.podMonitor.jobLabel The label to use to retrieve the job name from
  ## @param sequencer.podMonitor.podTargetLabels PodTargetLabels transfers labels on the Kubernetes Pod onto the target
  ## @param sequencer.podMonitor.extraPodMetricsEndpoints Extra scrapeable endpoint configuration
  ## @param sequencer.podMonitor.sampleLimit Per-scrape limit on number of scraped samples that will be accepted
  ## @param sequencer.podMonitor.targetLimit Limit on the number of scraped targets that will be accepted
  ## @param sequencer.podMonitor.labelLimit Per-scrape limit on number of labels that will be accepted for a sample (Prometheus versions 2.27 and newer)
  ## @param sequencer.podMonitor.labelNameLengthLimit Per-scrape limit on length of labels name that will be accepted for a sample (Prometheus versions 2.27 and newer)
  ## @param sequencer.podMonitor.labelValueLengthLimit Per-scrape limit on length of labels value that will be accepted for a sample (Prometheus versions 2.27 and newer)
  ##
  podMonitor:
    labels: {}
    jobLabel: ""
    podTargetLabels: []
    extraPodMetricsEndpoints: []
    sampleLimit: 0
    targetLimit: 0
    labelLimit: 0
    labelNameLengthLimit: 0
    labelValueLengthLimit: 0

## @section Automated testing configuration (do not use in production)

testing:
  bootstrapHook:
    ## @param testing.bootstrapHook.remoteParticipants List of remote Canton participants, only the `bootstrap` and `console`  will connect to them.<br />`name` and `host` are mandatory for each of them, otherwise the default is used
    ## @extra testing.bootstrapHook.remoteParticipants[*].name Participant name
    ## @extra testing.bootstrapHook.remoteParticipants[*].host Participant hostname
    ## @extra testing.bootstrapHook.remoteParticipants[*].ports.admin Participant admin port (gRPC)
    ## @extra testing.bootstrapHook.remoteParticipants[*].tls.admin.enabled Enable TLS to Participant admin API
    ## @extra testing.bootstrapHook.remoteParticipants[*].tls.admin.ca Participant TLS CA certificate
    ## @extra testing.bootstrapHook.remoteParticipants[*].tls.admin.certManager Cert-manager CSI driver configuration (only used when TLS is enabled and `issuerName` is defined), will automatically mount certificates in folder `/tls-<participant_name>`
    ## @extra testing.bootstrapHook.remoteParticipants[*].tls.admin.certManager.issuerGroup Issuer group, defaults to `certManager.issuerGroup` if empty
    ## @extra testing.bootstrapHook.remoteParticipants[*].tls.admin.certManager.issuerKind Issuer kind, defaults to `certManager.issuerKind` if empty
    ## @extra testing.bootstrapHook.remoteParticipants[*].tls.admin.certManager.issuerName Issuer name
    ## @extra testing.bootstrapHook.remoteParticipants[*].mtls.admin.enabled Enable mTLS to Participant admin API
    ## @extra testing.bootstrapHook.remoteParticipants[*].mtls.admin.chain Bootstrap hook and console mTLS certificate chain
    ## @extra testing.bootstrapHook.remoteParticipants[*].mtls.admin.key Bootstrap hook and console mTLS certificate key (PKCS-8)
    ## @extra testing.bootstrapHook.remoteParticipants[*].mtls.admin.certManager Cert-manager CSI driver configuration (only used when TLS is enabled and `issuerName` is defined), will automatically mount certificates in folder `/mtls-<participant_name>`
    ## @extra testing.bootstrapHook.remoteParticipants[*].mtls.admin.certManager.issuerGroup Issuer group, defaults to `certManager.issuerGroup` if empty
    ## @extra testing.bootstrapHook.remoteParticipants[*].mtls.admin.certManager.issuerKind Issuer kind, defaults to `certManager.issuerKind` if empty
    ## @extra testing.bootstrapHook.remoteParticipants[*].mtls.admin.certManager.issuerName Issuer name
    ##
    remoteParticipants: []
      # - name: "participant1"
      #   host: "participant1.mydomain.com"
      #   ports:
      #     admin: 4002
      #   tls:
      #     admin:
      #       enabled: true
      #       certManager:
      #         issuerGroup: "cert-manager.io"
      #         issuerKind: "Issuer"
      #         issuerName: "tls-certificate-issuer"
      #       ca: "/tls-participant1/ca.crt"
      #   mtls:
      #     admin:
      #       enabled: true
      #       certManager:
      #         issuerGroup: "cert-manager.io"
      #         issuerKind: "Issuer"
      #         issuerName: "mtls-certificate-issuer"
      #       chain: "/mtls-participant1/tls.crt"
      #       key: "/mtls-participant1/tls.key"
