---
## @section Common parameters

## @param nameOverride String to partially override `common.name` template (will maintain the release name)
##
nameOverride: ""
## @param fullnameOverride String to fully override `common.fullname` template
##
fullnameOverride: ""

## @param replicaCount Number of Participant pods to deploy
replicaCount: 1

## @param image.registry Docker image registry
## @param image.repository Docker image repository
## @param image.tag Docker image tag (immutable tags are recommended)
## @param image.digest Docker image digest in the way `sha256:aa...`. If this parameter is set, overrides `image.tag`
## @param image.pullPolicy Docker image pull policy. Allowed values: `Always`, `Never`, `IfNotPresent`
## @param image.pullSecrets Specify Docker registry existing secret names as an array
##
image:
  ## Private Docker image
  registry: digitalasset-docker.jfrog.io
  repository: http-json
  tag: ""
  digest: ""
  pullPolicy: IfNotPresent
  pullSecrets: []

## @param commonLabels Add labels to all the deployed resources
##
commonLabels: {}

## @extra certManager Cert-manager CSI driver defaults
## @param certManager.duration Requested certificates validity period. If empty `""` defaults to `720h`
## @param certManager.renewBefore Time to renew the certificate before expiry. If empty `""` defaults to a third of `duration`
## @param certManager.issuerGroup Issuer group. Allowed values: `cert-manager.io`, `cas-issuer.jetstack.io`, `cert-manager.k8s.cloudflare.com`, etc.
## @param certManager.issuerKind Issuer kind. Allowed values: `Issuer`, `ClusterIssuer`, `GoogleCASIssuer`, `OriginIssuer`, etc.
## @param certManager.fsGroup FS Group of mounted files, should be paired with and match container `runAsGroup`
##
certManager:
  duration: "87660h"
  renewBefore: "1h"
  issuerGroup: "cert-manager.io"
  issuerKind: "Issuer"
  fsGroup: 65532

## @section HTTP JSON API configuration

## @extra storage PostgreSQL configuration

storage:
  ## @param storage.host Server hostname
  ## @param storage.port Server port
  ## @param storage.database Database name
  ## @param storage.user User name
  ##
  host: "postgres"
  port: 5432
  database: "json"
  user: "json"
  ## @param storage.existingSecret.name Name of existing secret with user credentials
  ## @param storage.existingSecret.key Name of key in existing secret with user password
  ## Secret must be manually created in the namespace
  ## If existingSecret.name is set: environment variable JSON_API_DB_PASSWORD will be mounted from the scepcified secret/key
  ## Alternatively you can set key JSON_API_DB_PASSWORD directly in environmentSecrets
  ##
  existingSecret:
    name: ""
    key: ""
  ## @param storage.ssl Enable TLS connection
  ## @param storage.sslMode TLS mode. Allowed values: `disable`, `allow`, `prefer`, `require`, `verify-ca`, `verify-full`
  ## @param storage.sslRootCert CA certificate file (PEM encoded X509v3). Intermediate certificate(s) that chain up to this root certificate can also appear in this file.
  ## @param storage.sslCert Client certificate file (PEM encoded X509v3)
  ## @param storage.sslKey Client certificate key file (PKCS-12 or PKCS-8 DER)
  ## @param storage.certificatesSecret Name of an existing K8s secret that contains certificate files, mounted to `/pgtls` if not empty, provide K8s secret key names as filenames
  ##
  ssl: true
  sslMode: "require"
  sslRootCert: ""
  sslCert: ""
  sslKey: ""
  certificatesSecret: ""
  ## @param storage.extraConnectionProperties Extra PostgreSQL JDBC driver connection URI properties (everything after `?`, start with `&`)
  ## @param storage.tablePrefix Prefix for DB table names (to avoid collisions)
  ## @param storage.poolSize DB connection pool maximum connections
  ## @param storage.minIdle DB connection pool minimum idle connections
  ## @param storage.idleTimeout DB connection pool idle timeout
  ## @param storage.connectionTimeout  DB connection pool timeout
  ## @param storage.startMode How the DB schema should be handled. Allowed values: `start-only`, `create-only`, `create-if-needed-and-start`, `create-and-start`
  ##
  extraConnectionProperties: ""
  tablePrefix: ""
  poolSize: 10
  minIdle: 4
  idleTimeout: "10s"
  connectionTimeout: "60s"
  startMode: "create-and-start"

## @param ledgerAPI.host Ledger API hostname
## @param ledgerAPI.port Ledger API port
##
ledgerAPI:
  host: "participant"
  port: 4001

## @param allowInsecureTokens Allow connections without a reverse proxy providing HTTPS<br />**DO NOT ALLOW INSECURE TOKENS IN PRODUCTION**
##
allowInsecureTokens: false

## @section TLS configuration

tls:
  ## @param tls.enabled Enable TLS to Ledger API (gRPC)
  ##
  enabled: false
  ## @extra tls.certManager Cert-manager CSI driver configuration (only used when TLS is enabled), will automatically mount certificates in folder `/tls`
  ## @param tls.certManager.issuerGroup Issuer group (optional), defaults to `certManager.issuerGroup` if empty
  ## @param tls.certManager.issuerKind Issuer kind (optional), defaults to `certManager.issuerKind` if empty
  ## @param tls.certManager.issuerName Issuer name
  ##
  certManager:
    issuerGroup: ""
    issuerKind: ""
    issuerName: ""
  ## @param tls.ca CA certificate, if empty `""` JVM default trust store is used
  ##
  ca: "/tls/ca.crt"
  ## @param tls.minimumServerProtocolVersion Minimum version allowed: `TLSv1.2` or `TLSv1.3`. If empty `""` JVM defaults are used [[documentation]](https://www.java.com/en/configure_crypto.html)
  ## @param tls.ciphers Specify ciphers allowed, if empty `""` JVM defaults are used [[documentation]](https://www.java.com/en/configure_crypto.html)
  ## Configuration recommended by Mozilla: https://wiki.mozilla.org/Security/Server_Side_TLS
  ## Note: until at least Daml 2.6.3 these two parameters are not being picked up
  ##
  minimumServerProtocolVersion: "TLSv1.3"
  ciphers:
    - "TLS_AES_128_GCM_SHA256"
    - "TLS_AES_256_GCM_SHA384"
    - "TLS_CHACHA20_POLY1305_SHA256"

mtls:
  ## @param mtls.enabled Enable mTLS to Ledger API (gRPC)
  ##
  enabled: false
  ## @extra mtls.certManager Cert-manager CSI driver configuration (only used when TLS is enabled), will automatically mount certificates in folder `/mtls`
  ## @param mtls.certManager.issuerGroup Issuer group (optional), defaults to `certManager.issuerGroup` if empty
  ## @param mtls.certManager.issuerKind Issuer kind (optional), defaults to `certManager.issuerKind` if empty
  ## @param mtls.certManager.issuerName Issuer name
  ##
  certManager:
    issuerGroup: ""
    issuerKind: ""
    issuerName: ""
  ## @param mtls.chain Certificate chain
  ## @param mtls.key Certificate private key (PKCS-8)
  ##
  chain: "/mtls/tls.crt"
  key: "/mtls/tls.key"

## @section Logging

## @param logLevel Log4j logging levels. Allowed values: `TRACE`, `DEBUG`, `INFO`, `WARN` or `ERROR`
## @param logEncoder Logging encoder. Allowed values: `plain`, `json`
##
logLevel: "INFO"
logEncoder: "plain"

## @section Container ports

## @param ports.http JSON API container port (HTTP)
## @param ports.metrics Promotheus exporter container port (HTTP)
##
ports:
  http: 3000
  metrics: 8081

## @section Deployment configuration

## @extra environment Container environment variables
## @param environment.JDK_JAVA_OPTIONS Java launcher environment variable
## @param environmentSecrets Container secret environment variables
##
environment:
  JDK_JAVA_OPTIONS: "-XX:+ExitOnOutOfMemoryError -XX:InitialRAMPercentage=70 -XX:MaxRAMPercentage=70"
environmentSecrets: {}

## @param deployment.annotations Deployment extra annotations
## @param deployment.labels Deployment extra labels
## @param deployment.strategy Deployment strategy
##
deployment:
  annotations: {}
  labels: {}
  strategy: {}

pod:
  ## @param pod.annotations Extra annotations for Deployment pods
  ## @param pod.labels Extra labels for Deployment pods
  ##
  annotations: {}
  labels: {}
  ## @param pod.securityContext.enabled Enable pods Security Context
  ## @param pod.securityContext.fsGroup Special supplemental GID that applies to all containers in a pod
  ## @param pod.securityContext.fsGroupChangePolicy Defines behavior of changing ownership and permission of the volume before being exposed inside pods. Valid values are `OnRootMismatch` and `Always`
  ## @param pod.securityContext.sysctls List of namespaced sysctls used for the pod
  ##
  securityContext:
    enabled: true
    fsGroup: 65532
    fsGroupChangePolicy: "Always"
    sysctls: []

## @param securityContext.enabled Enable containers Security Context
## @param securityContext.readOnlyRootFilesystem Whether this container has a read-only root filesystem
## @param securityContext.runAsGroup The GID to run the entrypoint of the container process
## @param securityContext.runAsNonRoot Indicates that the container must run as a non-root user
## @param securityContext.runAsUser The UID to run the entrypoint of the container process
##
securityContext:
  enabled: true
  readOnlyRootFilesystem: true
  runAsGroup: 65532
  runAsNonRoot: true
  runAsUser: 65532

## @param affinity Affinity for pods assignment
## @param nodeSelector Node labels for pods assignment
## @extra resources Resources requests/limits for HTTP JSON API container
## @param tolerations Tolerations for pods assignment
##
affinity: {}
nodeSelector: {}
resources:
  ## @skip resources.requests.cpu
  ## @skip resources.limits.cpu
  ## @skip resources.limits.memory
  requests:
    cpu: 200m
  limits:
    cpu: 1
    memory: 1Gi
tolerations: []

## @param extraVolumeMounts Specify extra list of additional volumeMounts for HTTP JSON API container
## @param extraVolumes Specify extra list of additional volumes for HTTP JSON API pod
##
extraVolumeMounts: []
extraVolumes: []

## @section Service configuration

## @param service.type Service type. Allowed values: `ExternalName`, `ClusterIP`, `NodePort`, `LoadBalance`
## @param service.annotations Service extra annotations
## @param service.labels Service extra labels
## @param service.ports.http JSON API port (HTTP)
## @param service.ports.metrics Promotheus exporter service port (HTTP)
##
service:
  type: ClusterIP
  annotations: {}
  labels: {}
  ports:
    http: 7575
    metrics: 8081

## @section Ingress configuration

## @param ingress.enabled Enable ingress to HTTP JSON API service port `http` (HTTP)
## @param ingress.annotations Ingress extra annotations
## @param ingress.labels Ingress extra labels
## @param ingress.className Set `ingressClassName` on the ingress record
## @param ingress.hostname Default host for the ingress resource
## @param ingress.path Path to HTTP JSON API
## @param ingress.pathType Determines the interpretation of the `Path` matching.  Allowed values: `Exact`, `Prefix`, `ImplementationSpecific`
## @param ingress.tls Enable TLS configuration for `hostname`
##
ingress:
  enabled: false
  annotations: {}
  labels: {}
  className: ""
  hostname: "http-json.domain.com"
  path: "/"
  pathType: "Prefix"
  tls: []

## @section Service Account and RBAC configuration

## @param serviceAccount.create Enable creation of service accounts for pod(s)
## @param serviceAccount.annotations Service Account extra annotations
## @param serviceAccount.labels Service Account extra labels
## @param serviceAccount.automountServiceAccountToken API token automatically mounted into pods using this ServiceAccount. Set to `false` if pods do not use the K8s API
## @param serviceAccount.extraSecrets List of extra secrets allowed to be used by pods running using this ServiceAccount
##
serviceAccount:
  create: true
  annotations: {}
  labels: {}
  automountServiceAccountToken: false
  extraSecrets: []
## @param rbac.create Enable creation of RBAC resources attached to the service accounts
## @param rbac.rules Custom RBAC rules to set
##
rbac:
  create: true
  rules: []

## @section Monitoring configuration

metrics:
  ## @param metrics.enabled Enable Prometheus metrics endpoint
  ## @param metrics.reportingInterval Metrics reporting interval
  ##
  enabled: false
  reportingInterval: "30s"
  ## @param metrics.podMonitor.enabled Creates a Prometheus Operator PodMonitor (also requires `metrics.enabled` to be `true`)
  ## @param metrics.podMonitor.jobLabel The label to use to retrieve the job name from
  ## @param metrics.podMonitor.podTargetLabels PodTargetLabels transfers labels on the Kubernetes Pod onto the target
  ## @param metrics.podMonitor.extraPodMetricsEndpoints Extra scrapeable endpoint configuration
  ## @param metrics.podMonitor.sampleLimit Per-scrape limit on number of scraped samples that will be accepted
  ## @param metrics.podMonitor.targetLimit Limit on the number of scraped targets that will be accepted
  ## @param metrics.podMonitor.labelLimit Per-scrape limit on number of labels that will be accepted for a sample (Prometheus versions 2.27 and newer)
  ## @param metrics.podMonitor.labelNameLengthLimit Per-scrape limit on length of labels name that will be accepted for a sample (Prometheus versions 2.27 and newer)
  ## @param metrics.podMonitor.labelValueLengthLimit Per-scrape limit on length of labels value that will be accepted for a sample (Prometheus versions 2.27 and newer)
  ##
  podMonitor:
    enabled: false
    jobLabel: ""
    podTargetLabels: []
    extraPodMetricsEndpoints: []
    sampleLimit: 0
    targetLimit: 0
    labelLimit: 0
    labelNameLengthLimit: 0
    labelValueLengthLimit: 0
