{{/*
PostgreSQL JDBC driver connection URI
Syntax: postgresql://[userspec@][hostspec][/dbname][?paramspec]
Docs: https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING
*/}}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "common.fullname" . }}
  labels: {{- include "common.labels" . | nindent 4 }}
    {{- with .Values.commonLabels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
data:
  http-json.conf: |
    {
      server {
        address = "0.0.0.0"
        port = {{ int .Values.ports.http }}
      }

      ledger-api {
        address = {{ .Values.ledgerAPI.host | quote }}
        port = {{ int .Values.ledgerAPI.port }}

        {{- if .Values.tls.enabled }}
        tls {
          enabled = {{ .Values.tls.enabled }}
          {{- if ne .Values.tls.ca "" }}
          trust-collection-file = {{ .Values.tls.ca | quote }}
          {{- end }}
          {{- if .Values.mtls.enabled }}
          cert-chain-file = {{ .Values.mtls.chain | quote }}
          private-key-file = {{ .Values.mtls.key | quote }}
          {{- end }}
          minimum-server-protocol-version = {{ include "canton.tls.minimumServerProtocolVersion" .Values.tls.minimumServerProtocolVersion }}
          ciphers = {{ include "canton.tls.ciphers" .Values.tls.ciphers }}
        }
        {{- end }}
      }

      {{- if not .Values.testing.inMemoryStorage }}
      query-store {
        base-config {
          user = {{ .Values.storage.user | quote }}
          password = ${?PGPASSWORD}
          driver = "org.postgresql.Driver"
          url = {{ include "storage.url" . | trim | quote }}
          {{- with .Values.storage.tablePrefix }}
          tablePrefix = {{ . | quote }}
          {{- end }}
          pool-size = {{ int .Values.storage.poolSize }}
          min-idle = {{ int .Values.storage.minIdle }}
          idle-timeout = {{ .Values.storage.idleTimeout | quote }}
          connection-timeout = {{ .Values.storage.connectionTimeout | quote }}
        }

        start-mode = {{ .Values.storage.startMode | quote }}
      }
      {{- end }}

      package-reload-interval = {{ .Values.packageReloadInterval | quote }}
      max-inbound-message-size = {{ int .Values.maxInboundMessageSize }}
      package-max-inbound-message-size = {{ int .Values.packageMaxInboundMessageSize }}
      max-template-id-cache-entries = {{ int .Values.maxTemplateIdCacheEntries }}
      health-timeout-seconds = {{ int .Values.healthTimeoutSeconds }}

      {{ with .Values.websocketConfig }}
      websocket-config {
        max-duration = {{ .maxDuration | quote }}
        heartbeat-period = {{ .heartbeatPeriod | quote }}
        mode = {{ .mode | quote }}
      }
      {{ end }}

      {{- with .Values.authServices.targetScope }}
      auth-config {
        target-scope = {{ . | quote }}
      }
      {{- end }}

      {{- with .Values.testing.allowInsecureTokens }}
      allow-insecure-tokens = {{ . }}
      {{- end }}

      {{- if or .Values.testing.staticContent.prefix .Values.testing.staticContent.directory}}
      static-content {
        prefix = {{ .Values.testing.staticContent.prefix | quote }}
        directory = {{ .Values.testing.staticContent.directory | quote }}
      }
      {{- end }}

      {{- if .Values.metrics.enabled }}
      metrics {
        reporter = "prometheus://0.0.0.0:{{ .Values.ports.metrics }}"
        reporting-interval = {{ .Values.metrics.reportingInterval }}
      }
      {{- end }}
    }
