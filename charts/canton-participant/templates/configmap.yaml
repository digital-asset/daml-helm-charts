---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "common.fullname" . }}
  labels: {{- include "common.labels" . | nindent 4 }}
    app.kubernetes.io/component: participant
    {{- with .Values.commonLabels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
data:
  participant.conf: |
    canton {
      participants {
        {{ .Values.participantName }} {
          {{- include "canton.storage" . | indent 10 }}

          ledger-api {
            address = "0.0.0.0"
            command-service {
              max-commands-in-flight = {{ .Values.commandService.maxCommandsInFlight }}
            }
            port = {{ .Values.ports.public }}
            {{- if .Values.storage.asyncCommitEnabled }}
            postgres-data-source.synchronous-commit = off
            {{- end }}
            {{- if .Values.tls.public.enabled }}
            tls {
              cert-chain-file = {{ .Values.tls.public.chain | quote }}
              private-key-file = {{ .Values.tls.public.key | quote }}
              {{- if .Values.mtls.public.enabled }}
              {{- if ne .Values.mtls.public.ca "" }}
              trust-collection-file = {{ .Values.mtls.public.ca | quote }}
              {{- end }}
              client-auth = {
                type = "require"
                admin-client {
                  cert-chain-file = {{ .Values.mtls.public.chain | quote }}
                  private-key-file = {{ .Values.mtls.public.key | quote }}
                }
              }
              {{- end }}
              minimum-server-protocol-version = {{ include "canton.tls.minimumServerProtocolVersion" .Values.tls.public.minimumServerProtocolVersion }}
              ciphers = {{ include "canton.tls.ciphers" .Values.tls.public.ciphers }}
            }
            {{- end }}

            {{- if .Values.authServices.enabled }}
            auth-services = [{
              {{- include "participant.authServicesType" . | nindent 14 }}
              {{- with .Values.authServices.targetAudience }}
              target-audience = {{ . | quote }}
              {{- end }}
            }]
            {{- with .Values.authServices.additionalAdminUserId }}
            user-management-service = {
              additional-admin-user-id = {{ . | quote }}
            }
            {{- end }}
            {{- end }}
    
            max-contract-state-cache-size = {{ .Values.caching.maxContractStateCacheSize }}
            max-contract-key-state-cache-size = {{ .Values.caching.maxContractKeyStateCacheSize }}
            max-transactions-in-memory-fan-out-buffer-size = {{ .Values.caching.maxTransactionsInMemoryFanOutBufferSize }}
          }

          admin-api {
            address = "0.0.0.0"
            port = {{ .Values.ports.admin }}
            {{- if .Values.tls.admin.enabled }}
            tls {
              cert-chain-file = {{ .Values.tls.admin.chain | quote }}
              private-key-file = {{ .Values.tls.admin.key | quote }}
              {{- if .Values.mtls.admin.enabled }}
              {{- if ne .Values.mtls.admin.ca "" }}
              trust-collection-file = {{ .Values.mtls.admin.ca | quote }}
              {{- end }}
              client-auth = {
                type = "require"
                admin-client {
                  cert-chain-file = {{ .Values.mtls.admin.chain | quote }}
                  private-key-file = {{ .Values.mtls.admin.key | quote }}
                }
              }
              {{- end }}
              minimum-server-protocol-version = {{ include "canton.tls.minimumServerProtocolVersion" .Values.tls.admin.minimumServerProtocolVersion }}
              ciphers = {{ include "canton.tls.ciphers" .Values.tls.admin.ciphers }}
            }
            {{- end }}
          }

          caching {
            contract-store {
              maximum-size = {{ .Values.caching.contractStore.maxSize }}
              expire-after-access = {{ .Values.caching.contractStore.expireAfterAccess | quote }}
            }
          }

          init.parameters.unique-contract-keys = {{ .Values.uniqueContractKeys }}

          replication.enabled = true

          monitoring.grpc-health-server {
            address = "0.0.0.0"
            port = {{ .Values.ports.health }}
          }
        }
      }

      {{ if .Values.metrics.enabled -}}
      monitoring.metrics {
        report-jvm-metrics = yes
        reporters = [{
          type = prometheus
          address = "0.0.0.0"
          port = {{ .Values.ports.metrics }}
        }]
      }
      {{- end }}
    }
  participant.canton: |
    {{- with .Values.commandService }}
    participants.local.head.resources.set_resource_limits(
      ResourceLimits(
        {{- if lt (int .maxRate) 0 }}
        maxRate = None,
        {{- else }}
        maxRate = Some({{ .maxRate }}),
        {{- end }}
        {{- if lt (int .maxDirtyRequests) 0 }}
        maxDirtyRequests = None,
        {{- else }}
        maxDirtyRequests = Some({{ .maxDirtyRequests }}),
        {{- end }}
        maxBurstFactor = {{ .maxBurstFactor }}
      )
    )
    {{- end }}
    {{- with .Values.bootstrapScript }}
    {{- . | nindent 4 }}
    {{- end }}
  {{- with .Values.configOverride }}
  participant-override.conf: |
  {{- . | nindent 4 }}
  {{- end }}
    
