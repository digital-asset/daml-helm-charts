{{/* This script must be idempotent, it can run again even if this participant are already initialized */}}
{{- if .Values.bootstrap.enabled }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "common.fullname" . }}-bootstrap
  labels: {{- include "common.labels" . | nindent 4 }}
    app.kubernetes.io/component: bootstrap
    {{- with .Values.commonLabels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
data:
  bootstrap.canton: |
    logger.info("Bootstrap start")

    import com.digitalasset.canton.config.NonNegativeDuration
    import com.digitalasset.canton.participant.domain.DomainConnectionConfig
    import com.digitalasset.canton.sequencing.GrpcSequencerConnection
    import com.digitalasset.canton.time.NonNegativeFiniteDuration
    import com.digitalasset.canton.util.BinaryFileUtil

    val participant = participants.remote.head

    logger.debug("Setting script commands timeout")
    console.set_command_timeout(NonNegativeDuration.ofSeconds(Duration({{ .Values.bootstrap.commandsTimeout | quote }}).toSeconds))

    logger.info(s"Waiting for participant to be running")
    participant.health.wait_for_running()

    {{- if .Values.bootstrap.remoteSequencer.tls.enabled }}
    logger.debug("TLS to sequencer is enabled")
    {{- else }}
    logger.warn("TLS to sequencer is disabled ⚠️")
    {{- end }}

    val domainAlias = {{ .Values.bootstrap.remoteSequencer.domain.alias | quote }}

    {{- if .Values.testing.bootstrap.automaticDomainRegistration }}
    val domainManager = domainManagers.remote.head
    val domainId = Some(domainManager.id)
    if (domainManager.participants.list.exists(_.item.participant == participant.id)) {
      logger.info(s"Participant ${participant.name} already registered to domain ${domainManager.name}")
    } else {
      logger.info(s"Registering participant ${participant.name} to domain ${domainManager.name}")
      domainManager.participants.set_state(participant.id, ParticipantPermission.Submission, TrustLevel.Ordinary)
    }
    {{- else }}
    {{- if .Values.bootstrap.remoteSequencer.domain.verifyId }}
    {{- include "participant.bootstrapDomainId" . | nindent 4 }}
    {{- else }}
    logger.warn("You are not checking the target domain ID, you could join any domain ⚠️")
    val domainId = None
    {{- end }}
    {{- end }}

    val sequencerURL = {{ include "sequencer.url" . | quote }}

    {{ if and .Values.bootstrap.remoteSequencer.tls.enabled .Values.bootstrap.remoteSequencer.tls.ca -}}
    logger.info("Loading sequencer CA certificate file")
    val certificate = BinaryFileUtil.tryReadByteStringFromFile({{ .Values.bootstrap.remoteSequencer.tls.ca | quote }})
    logger.info("Creating sequencer gRPC connection with custom certificate")
    val connection = GrpcSequencerConnection.tryCreate(sequencerURL, Some(certificate))
    {{ else -}}
    logger.info("Creating sequencer gRPC connection without custom certificate")
    val connection = GrpcSequencerConnection.tryCreate(sequencerURL)
    {{ end }}
    logger.info("Creating Domain connection configuration")
    val config = DomainConnectionConfig(
      domainAlias,
      connection,
      false,
      domainId,
      100,
      Some(NonNegativeFiniteDuration.tryOfSeconds(Duration({{ .Values.bootstrap.remoteSequencer.initialRetryDelay | quote }}).toSeconds)),
      Some(NonNegativeFiniteDuration.tryOfSeconds(Duration({{ .Values.bootstrap.remoteSequencer.maxRetryDelay | quote }}).toSeconds))
    )

    if (participant.domains.is_registered(domainAlias)) {
      if(participant.domains.config(domainAlias) != Some(config)) {
        logger.warn(s"Sequencer of domain ${domainAlias} already registered, modifying configuration ⚠️")
         participant.domains.modify(domainAlias, _ => config)
      } else {
        logger.info("Sequencer already registered with the same configuration")
      }
    } else {
      logger.info(s"Registering sequencer of domain ${domainAlias}")
      participant.domains.register(config)
    }
    logger.info(s"(Re)connecting to sequencer of domain ${domainAlias} at ${sequencerURL}")
    participant.domains.reconnect(domainAlias)
    logger.info("Pinging participant to make sure everything is alright")
    participant.health.ping(participant)
    logger.info("Bootstrap succeeded")
{{- end }}
