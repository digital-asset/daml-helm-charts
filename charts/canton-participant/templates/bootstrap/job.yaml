{{- if .Values.bootstrapHook.enabled }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "common.fullname" . }}-bootstrap
  annotations:
    "helm.sh/hook": {{ .Values.bootstrapHook.job.helmHook | quote }}
    "helm.sh/hook-weight": {{ .Values.bootstrapHook.job.helmHookWeight | quote }}
    "helm.sh/hook-delete-policy": {{ .Values.bootstrapHook.job.helmHookDeletePolicy | quote }}
    {{- with .Values.bootstrapHook.job.annotations }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  labels: {{- include "common.labels" . | nindent 4 }}
    app.kubernetes.io/component: bootstrap
    {{- with .Values.commonLabels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
    {{- with .Values.bootstrapHook.job.labels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
spec:
  backoffLimit: {{ .Values.bootstrapHook.backoffLimit }}
  activeDeadlineSeconds: {{ .Values.bootstrapHook.activeDeadlineSeconds }}
  template:
    metadata:
      annotations:
        "checksum/config": {{ include (print $.Template.BasePath "/configmap-remote.yaml") . | sha256sum | quote }}
        "checksum/env": {{ include (print $.Template.BasePath "/bootstrap/configmap-env.yaml") . | sha256sum | quote }}
        "checksum/secret": {{ include (print $.Template.BasePath "/bootstrap/secret-env.yaml") . | sha256sum | quote }}
        "checksum/script": {{ include (print $.Template.BasePath "/bootstrap/configmap.yaml") . | sha256sum | quote }}
        {{- with .Values.bootstrapHook.pod.annotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels: {{- include "common.labels" . | nindent 8 }}
        app.kubernetes.io/component: bootstrap
        {{- with .Values.commonLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- with .Values.bootstrapHook.pod.labels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- if .Values.serviceAccount.create }}
      serviceAccountName: {{ template "common.serviceAccountName" (list . "bootstrap") }}
      {{- end }}
      {{- with .Values.image.pullSecrets }}
      imagePullSecrets: {{- toYaml . | nindent 8 }}
      {{- end }}
      restartPolicy: Never
      {{- if .Values.bootstrapHook.pod.securityContext.enabled }}
      securityContext: {{- omit .Values.bootstrapHook.pod.securityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      containers:
        - name: canton
          image: {{ include "common.image" . | quote }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          {{- if .Values.bootstrapHook.securityContext.enabled }}
          securityContext: {{- omit .Values.bootstrapHook.securityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          args:
            - "run"
            - "--log-profile=container"
            - "--log-encoder={{ .Values.logEncoder }}"
            - "--log-level-root={{ .Values.bootstrapHook.logLevel.root }}"
            - "--log-level-canton={{ .Values.bootstrapHook.logLevel.canton }}"
            - "--log-level-stdout={{ .Values.bootstrapHook.logLevel.stdout }}"
            - "--config=/etc/canton/remote.conf"
            - "/etc/canton/bootstrap.canton"
          envFrom:
            {{- if .Values.bootstrapHook.environment }}
            - configMapRef:
                name: {{ include "common.fullname" . }}-bootstrap-envmap
            {{- end }}
            {{- if .Values.bootstrapHook.environmentSecrets }}
            - secretRef:
                name: {{ include "common.fullname" . }}-bootstrap-secretmap
            {{- end }}
          {{- with .Values.bootstrapHook.resources }}
          resources: {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: config
              mountPath: /etc/canton
              readOnly: true
            {{- if .Values.tls.public.enabled }}
            - name: tls-public
              mountPath: /tls-public
              readOnly: true
            {{- if .Values.mtls.public.enabled }}
            - name: mtls-public
              mountPath: /mtls-public
              readOnly: true
            {{- end }}
            {{- end }}
            {{- if .Values.tls.admin.enabled }}
            - name: tls-admin
              mountPath: /tls-admin
              readOnly: true
            {{- if .Values.mtls.admin.enabled }}
            - name: mtls-admin
              mountPath: /mtls-admin
              readOnly: true
            {{- end }}
            {{- end }}
            {{- if .Values.bootstrapHook.remoteSequencer.tls.enabled }}
            - name: tls-sequencer
              mountPath: /tls-sequencer
              readOnly: true
            {{- end }}
            {{- if .Values.testing.bootstrapHook.automaticDomainRegistration }}
            {{- with .Values.testing.bootstrapHook.remoteDomainManager }}
            {{- if .tls.enabled }}
            - name: tls-domain-manager
              mountPath: /tls-domain-manager
              readOnly: true
            {{- if .mtls.enabled }}
            - name: mtls-domain-manager
              mountPath: /mtls-domain-manager
              readOnly: true
            {{- end }}
            {{- end }}
            {{- end }}
            {{- end }}
            {{- with .Values.bootstrapHook.extraVolumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
      volumes:
        - name: config
          projected:
            sources:
            - configMap:
                name: {{ include "common.fullname" . }}-bootstrap
            - configMap:
                name: {{ include "common.fullname" . }}-remote
        {{- if and .Values.tls.public.enabled .Values.tls.public.certManager.issuerName }}
        # Dummy certificate only used to mount the root CA certificate
        {{- include "certManager.csi" (list . "bootstrap" "tls-public" .Values.tls.public.certManager "") | indent 8 }}
        {{- if and .Values.mtls.public.enabled .Values.mtls.public.certManager.issuerName }}
        {{- include "certManager.csi" (list . "bootstrap" "mtls-public" .Values.mtls.public.certManager "") | indent 8 }}
        {{- end }}
        {{- end }}
        {{- if and .Values.tls.admin.enabled .Values.tls.admin.certManager.issuerName }}
        # Dummy certificate only used to mount the root CA certificate
        {{- include "certManager.csi" (list . "bootstrap" "tls-admin" .Values.tls.admin.certManager "") | indent 8 }}
        {{- if and .Values.mtls.admin.enabled .Values.mtls.admin.certManager.issuerName }}
        {{- include "certManager.csi" (list . "bootstrap" "mtls-admin" .Values.mtls.admin.certManager "") | indent 8 }}
        {{- end }}
        {{- end }}
        {{- if and .Values.bootstrapHook.remoteSequencer.tls.enabled .Values.bootstrapHook.remoteSequencer.tls.certManager.issuerName }}
        # Dummy certificate only used to mount the root CA certificate
        {{- include "certManager.csi" (list . "bootstrap" "tls-sequencer" .Values.bootstrapHook.remoteSequencer.tls.certManager "") | indent 8 }}
        {{- end }}
        {{- with .Values.bootstrapHook.extraVolumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- if .Values.testing.bootstrapHook.automaticDomainRegistration }}
        {{- with .Values.testing.bootstrapHook.remoteDomainManager }}
        {{- if and .tls.enabled .tls.certManager.issuerName }}
        # Dummy certificate only used to mount the root CA certificate
        {{- include "certManager.csi" (list $ "bootstrap" "tls-domain-manager" .tls.certManager "") | indent 8 }}
        {{- if and .mtls.enabled .mtls.certManager.issuerName }}
        {{- include "certManager.csi" (list $ "bootstrap" "mtls-domain-manager" .mtls.certManager "") | indent 8 }}
        {{- end }}
        {{- end }}
        {{- end }}

        {{- end }}
      {{- with .Values.bootstrapHook.nodeSelector }}
      nodeSelector: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.bootstrapHook.affinity }}
      affinity: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.bootstrapHook.tolerations }}
      tolerations: {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
