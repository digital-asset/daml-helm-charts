---
## @section Common parameters

## @param nameOverride String to partially override `common.name` template (will maintain the release name)
##
nameOverride: ""
## @param fullnameOverride String to fully override `common.fullname` template
##
fullnameOverride: ""

## @param replicaCount Number of Participant pods to deploy. Allowed values: `1` (active/passive HA, scaling up does not work)
## Participant is using active/passive HA which is incompatible with Kubernetes => run only one pod at a time
replicaCount: 1

## @param image.registry Canton Docker image registry
## @param image.repository Canton Docker image repository
## @param image.tag Canton Docker image tag (immutable tags are recommended)
## @param image.digest Canton Docker image digest in the way `sha256:aa...`. If this parameter is set, overrides `image.tag`
## @param image.pullPolicy Canton Docker image pull policy. Allowed values: `Always`, `Never`, `IfNotPresent`
## @param image.pullSecrets Specify Docker registry existing secret names as an array
##
image:
  ## Private Docker image
  registry: digitalasset-docker.jfrog.io
  repository: canton-enterprise
  tag: ""
  digest: ""
  pullPolicy: IfNotPresent
  pullSecrets: []

## @param commonLabels Add labels to all the deployed resources
##
commonLabels: {}

## @extra certManager Cert-manager CSI driver defaults
## @param certManager.duration Requested certificates validity period. If empty `""` defaults to `720h`
## @param certManager.renewBefore Time to renew the certificate before expiry. If empty `""` defaults to a third of `duration`
## @param certManager.issuerGroup Issuer group. Allowed values: `cert-manager.io`, `cas-issuer.jetstack.io`, `cert-manager.k8s.cloudflare.com`, etc.
## @param certManager.issuerKind Issuer kind. Allowed values: `Issuer`, `ClusterIssuer`, `GoogleCASIssuer`, `OriginIssuer`, etc.
## @param certManager.fsGroup FS Group of mounted files, should be paired with and match container `runAsGroup`
##
certManager:
  duration: "87660h"
  renewBefore: "1h"
  issuerGroup: "cert-manager.io"
  issuerKind: "Issuer"
  fsGroup: 65532

## @section Participant configuration

## @param participantName Mandatory Canton Participant name
## @param uniqueContractKeys When enabled, Participant can only connect to a Domain with unique contract keys enabled as well
##
participantName: "participant1"
uniqueContractKeys: false

## @extra storage PostgreSQL configuration

storage:
  ## @param storage.host Server hostname
  ## @param storage.port Server port
  ## @param storage.database Database name
  ## @param storage.user User name
  ##
  host: "postgres"
  port: 5432
  database: "participant1"
  user: "canton"
  ## @param storage.existingSecret.name Name of existing secret with user credentials
  ## @param storage.existingSecret.key Name of key in existing secret with user password
  ## Secret must be manually created in the namespace
  ## If existingSecret.name is set: environment variable CANTON_DB_PASSWORD will be mounted from the scepcified secret/key
  ## Alternatively you can set key CANTON_DB_PASSWORD directly in environmentSecrets
  ##
  existingSecret:
    name: ""
    key: ""
  ## @param storage.ssl Enable TLS connection
  ## @param storage.sslMode TLS mode. Allowed values: `disable`, `allow`, `prefer`, `require`, `verify-ca`, `verify-full`
  ## @param storage.sslRootCert CA certificate file (PEM encoded X509v3). Intermediate certificate(s) that chain up to this root certificate can also appear in this file.
  ## @param storage.sslCert Client certificate file (PEM encoded X509v3)
  ## @param storage.sslKey Client certificate key file (PKCS-12 or PKCS-8 DER)
  ## @param storage.certificatesSecret Name of an existing K8s secret that contains certificate files, mounted to `/pgtls` if not empty, provide K8s secret key names as filenames
  ##
  ssl: true
  sslMode: "require"
  sslRootCert: ""
  sslCert: ""
  sslKey: ""
  certificatesSecret: ""
  ## @param storage.maxConnections Database connection pool maximum connections
  ##
  maxConnections: 10

## @section Bootstrap configuration

## @extra bootstrap Initialize your participant, connecting to a remote sequencer
## @param bootstrap.enabled Enable Job (Helm chart hook), will create one or more ephemeral Pods
## @param bootstrap.backoffLimit Specifies the number of retries before marking this job failed
## @param bootstrap.activeDeadlineSeconds Specifies the duration in seconds relative to the startTime that the job may be continuously active before the system tries to terminate it
## @param bootstrap.commandsTimeout Script commands timeout. Example values: `10s`, `10m' or `10h`
##
bootstrap:
  enabled: false
  backoffLimit: 2
  activeDeadlineSeconds: 600
  commandsTimeout: "1m"
  ## @extra bootstrap.remoteSequencer Remote sequencer connection configuration
  remoteSequencer:
    ## @param bootstrap.remoteSequencer.domainAlias Domain alias
    ## @param bootstrap.remoteSequencer.domainId Mandatory Domain ID
    ## @param bootstrap.remoteSequencer.host Sequencer host
    ## @param bootstrap.remoteSequencer.port Sequencer port, if empty `""` HTTP/HTTPS default is used (`80`/`443`)
    ##
    domainAlias: "mydomain"
    domainId: ""
    host: "mysequencer.domain.com"
    port: ""
    tls:
      ## @param bootstrap.remoteSequencer.tls.enabled Enable TLS to Sequencer
      ##
      enabled: false
      ## @extra bootstrap.remoteSequencer.tls.certManager Cert-manager CSI driver configuration (only used if TLS is enabled and `issuerName` is defined), will automatically mount certificates in folder `/tls-<domain_alias>`
      ## @param bootstrap.remoteSequencer.tls.certManager.issuerGroup Issuer group (optional), defaults to `certManager.issuerGroup` if empty
      ## @param bootstrap.remoteSequencer.tls.certManager.issuerKind Issuer kind (optional), defaults to `certManager.issuerKind` if empty
      ## @param bootstrap.remoteSequencer.tls.certManager.issuerName Issuer name
      ##
      certManager:
        issuerGroup: ""
        issuerKind: ""
        issuerName: ""
      ## @param bootstrap.remoteSequencer.tls.ca CA certificate, if empty `""` JVM default trust store is used
      ##
      ca: "/tls-mydomain/ca.crt"
    ## @param bootstrap.remoteSequencer.initialRetryDelay Initial retry delay. Example values: `10s`, `10m' or `10h`
    ## @param bootstrap.remoteSequencer.maxRetryDelay Maximum retry delay. Example values: `10s`, `10m' or `10h`
    ##
    initialRetryDelay: "30s"
    maxRetryDelay: "10m"

  ## @extra bootstrap.logLevel Log4j logging levels. Allowed values: `TRACE`, `DEBUG`, `INFO`, `WARN` or `ERROR`
  ## @param bootstrap.logLevel.root Canton and external libraries, but not `stdout`
  ## @param bootstrap.logLevel.canton Only the Canton logger
  ## @param bootstrap.logLevel.stdout Usually the text displayed in the Canton console
  ##
  logLevel:
    root: "INFO"
    canton: "INFO"
    stdout: "INFO"
  ## @extra bootstrap.environment Environment variables
  ## @param bootstrap.environmentSecrets Secret environment variables
  ## @param bootstrap.environment.JDK_JAVA_OPTIONS Java launcher environment variable
  ##
  environment:
    JDK_JAVA_OPTIONS: "-XX:InitialRAMPercentage=70 -XX:MaxRAMPercentage=70"
  environmentSecrets: {}
  ## @extra bootstrap.job Bootstrap Job and Helm hook configuration
  ## @param bootstrap.job.annotations Job extra annotations
  ## @param bootstrap.job.labels Job extra labels
  ## @param bootstrap.job.helmHook Annotation `helm.sh/hook` value
  ## @param bootstrap.job.helmHookWeight Annotation `helm.sh/hook-weight` value
  ## @param bootstrap.job.helmHookDeletePolicy Annotation `helm.sh/hook-delete-policy` value
  ## ref: https://helm.sh/docs/topics/charts_hooks/
  ##
  job:
    annotations: {}
    labels: {}
    helmHook: "post-install,post-upgrade"
    helmHookWeight: "5"
    helmHookDeletePolicy: "before-hook-creation"
  ## @param bootstrap.pod.annotations Extra annotations for bootstrap Job pods
  ## @param bootstrap.pod.labels Extra labels for bootstrap Job pods
  ## @param bootstrap.pod.securityContext.enabled Enable bootstrap Job pods Security Context
  ## @param bootstrap.pod.securityContext.fsGroup Special supplemental GID that applies to all containers in a pod
  ## @param bootstrap.pod.securityContext.fsGroupChangePolicy Defines behavior of changing ownership and permission of the volume before being exposed inside pods. Valid values are `OnRootMismatch` and `Always`
  ## @param bootstrap.pod.securityContext.sysctls List of namespaced sysctls used for the pod
  ##
  pod:
    annotations: {}
    labels: {}
    securityContext:
      enabled: true
      fsGroup: 65532
      fsGroupChangePolicy: "Always"
      sysctls: []
  ## @param bootstrap.securityContext.enabled Enable bootstrap container Security Context
  ## @param bootstrap.securityContext.readOnlyRootFilesystem Whether this container has a read-only root filesystem
  ## @param bootstrap.securityContext.runAsGroup The GID to run the entrypoint of the container process
  ## @param bootstrap.securityContext.runAsNonRoot Indicates that the container must run as a non-root user
  ## @param bootstrap.securityContext.runAsUser The UID to run the entrypoint of the container process
  ##
  securityContext:
    enabled: true
    readOnlyRootFilesystem: false
    runAsGroup: 65532
    runAsNonRoot: true
    runAsUser: 65532
  ## @param bootstrap.affinity Affinity for pods assignment
  ## @param bootstrap.nodeSelector Node labels for pods assignment
  ## @extra bootstrap.resources Resources requests/limits for bootstrap container
  ## @param bootstrap.tolerations Tolerations for pods assignment
  ##
  affinity: {}
  nodeSelector: {}
  resources:
    ## @skip bootstrap.resources.requests.cpu
    ## @skip bootstrap.resources.limits.cpu
    ## @skip bootstrap.resources.limits.memory
    requests:
      cpu: 100m
    limits:
      cpu: 1
      memory: 1Gi
  tolerations: []
  ## @param bootstrap.extraVolumeMounts Specify extra list of additional volumeMounts for bootstrap container
  ## @param bootstrap.extraVolumes Specify extra list of additional volumes for bootstrap pod
  ##
  extraVolumeMounts: []
  extraVolumes: []
  ## @extra bootstrap.serviceAccount.create Creation of `ServiceAccount` for bootstrap pod(s) is enabled with global switch `serviceAccount.create`
  ## @param bootstrap.serviceAccount.automountServiceAccountToken API token automatically mounted into pods using this ServiceAccount. Set to `false` if pods do not use the K8s API
  ## @param bootstrap.serviceAccount.annotations Service Account extra annotations
  ## @param bootstrap.serviceAccount.labels Service Account extra labels
  ## @param bootstrap.serviceAccount.extraSecrets List of extra secrets allowed to be used by pods running using this ServiceAccount
  ##
  serviceAccount:
    annotations: {}
    labels: {}
    automountServiceAccountToken: false
    extraSecrets: []
  ## @extra bootstrap.rbac.create Creation of RBAC resources for bootstrap pod(s) is enabled with global switch `rbac.create`
  ## @param bootstrap.rbac.rules Custom RBAC rules to set
  ##
  rbac:
    rules: []

## @section Console configuration

## @extra console Single console pod for administration/debug of all the other components
## @param console.enabled Enable Deployment
##
console:
  enabled: false
  ## @param console.terminationGracePeriodSeconds Stop the pod immediately by default, tailing `/dev/null` to stay up
  ##
  terminationGracePeriodSeconds: 0
  ## @extra console.image Specific Docker image to be able to start a Canton console. Reusing `image.registry`, `image.pullPolicy` and `image.pullSecrets`
  ## @param console.image.repository Canton console Docker image repository
  ## @param console.image.tag Canton console Docker image tag (immutable tags are recommended)
  ## @param console.image.digest Canton console Docker image digest in the way `sha256:aa...`. If this parameter is set, overrides `image.tag`
  ##
  image:
    ## Private Docker image
    repository: canton-enterprise
    tag: ""
    digest: ""
  ## @extra console.environment Environment variables
  ## @param console.environmentSecrets Secret environment variables
  ## @param console.environment.JDK_JAVA_OPTIONS Java launcher environment variable
  ##
  environment:
    JDK_JAVA_OPTIONS: "-XX:InitialRAMPercentage=70 -XX:MaxRAMPercentage=70"
  environmentSecrets: {}
  ## @param console.deployment.annotations Deployment extra annotations
  ## @param console.deployment.labels Deployment extra labels
  ## @param console.deployment.strategy Deployment strategy
  ##
  deployment:
    annotations: {}
    labels: {}
    strategy: {}
  ## @param console.pod.annotations Extra annotations for console Deployment pods
  ## @param console.pod.labels Extra labels for console Deployment pods
  ## @param console.pod.securityContext.enabled Enable console Deployment pods Security Context
  ## @param console.pod.securityContext.fsGroup Special supplemental GID that applies to all containers in a pod
  ## @param console.pod.securityContext.fsGroupChangePolicy Defines behavior of changing ownership and permission of the volume before being exposed inside pods. Valid values are `OnRootMismatch` and `Always`
  ## @param console.pod.securityContext.sysctls List of namespaced sysctls used for the pod
  ##
  pod:
    annotations: {}
    labels: {}
    securityContext:
      enabled: true
      fsGroup: 65532
      fsGroupChangePolicy: "Always"
      sysctls: []
  ## @param console.securityContext.enabled Enable console container Security Context
  ## @param console.securityContext.readOnlyRootFilesystem Whether this container has a read-only root filesystem
  ## @param console.securityContext.runAsGroup The GID to run the entrypoint of the container process
  ## @param console.securityContext.runAsNonRoot Indicates that the container must run as a non-root user
  ## @param console.securityContext.runAsUser The UID to run the entrypoint of the container process
  ##
  securityContext:
    enabled: true
    readOnlyRootFilesystem: false
    runAsGroup: 65532
    runAsNonRoot: true
    runAsUser: 65532
  ## @param console.affinity Affinity for pods assignment
  ## @param console.nodeSelector Node labels for pods assignment
  ## @extra console.resources Resources requests/limits for console container
  ## @param console.tolerations Tolerations for pods assignment
  ##
  affinity: {}
  nodeSelector: {}
  resources:
    ## @skip console.resources.requests.cpu
    ## @skip console.resources.limits.cpu
    ## @skip console.resources.limits.memory
    requests:
      cpu: 100m
    limits:
      cpu: 1
      memory: 1Gi
  tolerations: []
  ## @param console.extraVolumeMounts Specify extra list of additional volumeMounts for console container
  ## @param console.extraVolumes Specify extra list of additional volumes for console pod
  ##
  extraVolumeMounts: []
  extraVolumes: []
  ## @extra console.serviceAccount.create Creation of `ServiceAccount` for console pod(s) is enabled with global switch `serviceAccount.create`
  ## @param console.serviceAccount.automountServiceAccountToken API token automatically mounted into pods using this ServiceAccount. Set to `false` if pods do not use the K8s API
  ## @param console.serviceAccount.annotations Service Account extra annotations
  ## @param console.serviceAccount.labels Service Account extra labels
  ## @param console.serviceAccount.extraSecrets List of extra secrets allowed to be used by pods running using this ServiceAccount
  ##
  serviceAccount:
    annotations: {}
    labels: {}
    automountServiceAccountToken: false
    extraSecrets: []
  ## @extra console.rbac.create Creation of RBAC resources for console pod(s) is enabled with global switch `rbac.create`
  ## @param console.rbac.rules Custom RBAC rules to set
  ##
  rbac:
    rules: []

common:
  ## @section Common parameters for the `boostrap` and `console` only
  ##
  ## @extra common.features Enable additional commands
  ## @param common.features.enablePreviewCommands Enable preview commands (unstable)
  ## @param common.features.enableTestingCommands Enable testing commands (for developers)
  ## @param common.features.enableRepairCommands Enable manual repair commands
  ##
  features:
    enablePreviewCommands: false
    enableTestingCommands: false
    enableRepairCommands: false

  ## @section Network Policy
  ##
  ## @param common.networkpolicy.enabled Enable Network Policy definitions
  ## @param common.networkpolicy.labels Network Policy extra labels
  networkpolicy:
    enabled: true
    labels: {}

## @section Logging

## @extra logLevel Log4j logging levels. Allowed values: `TRACE`, `DEBUG`, `INFO`, `WARN` or `ERROR`
## @param logLevel.root Canton and external libraries, but not `stdout`
## @param logLevel.canton Only the Canton logger
## @param logLevel.stdout Usually the text displayed in the Canton console
## @param logEncoder Logging encoder. Allowed values: `plain`, `json`
##
logLevel:
  root: "INFO"
  canton: "INFO"
  stdout: "INFO"
logEncoder: "plain"

## @section TLS configuration

tls:
  public:
    ## @param tls.public.enabled Enable TLS on Ledger API (gRPC)
    ##
    enabled: false
    ## @extra tls.public.certManager Cert-manager CSI driver configuration (only used when TLS is enabled and `issuerName` is defined), will automatically mount certificates in folder `/tls-public`
    ## @param tls.public.certManager.issuerGroup Issuer group (optional), defaults to `certManager.issuerGroup` if empty
    ## @param tls.public.certManager.issuerKind Issuer kind (optional), defaults to `certManager.issuerKind` if empty
    ## @param tls.public.certManager.issuerName Issuer name
    ## @param tls.public.certManager.ipSans IP addresses the certificate will be requested for.
    ##
    certManager:
      issuerGroup: ""
      issuerKind: ""
      issuerName: ""
      ipSans: "0.0.0.0"
    ## @param tls.public.ca CA certificate, if empty `""` JVM default trust store is used
    ## @param tls.public.chain Certificate chain
    ## @param tls.public.key Certificate private key (PKCS-8)
    ##
    ca: "/tls-public/ca.crt"
    chain: "/tls-public/tls.crt"
    key: "/tls-public/tls.key"
    ## @param tls.public.minimumServerProtocolVersion Minimum version allowed: `TLSv1.2` or `TLSv1.3`. If empty `""` JVM defaults are used [[documentation]](https://www.java.com/en/configure_crypto.html)
    ## @param tls.public.ciphers Specify ciphers allowed, if empty `""` JVM defaults are used [[documentation]](https://www.java.com/en/configure_crypto.html)
    ## Configuration recommended by Mozilla: https://wiki.mozilla.org/Security/Server_Side_TLS
    ##
    minimumServerProtocolVersion: "TLSv1.3"
    ciphers:
      - "TLS_AES_128_GCM_SHA256"
      - "TLS_AES_256_GCM_SHA384"
      - "TLS_CHACHA20_POLY1305_SHA256"
  admin:
    ## @param tls.admin.enabled Enable TLS on admin API (gRPC)
    ##
    enabled: false
    ## @extra tls.admin.certManager Cert-manager CSI driver configuration (only used when TLS is enabled and `issuerName` is defined), will automatically mount certificates in folder `/tls-admin`
    ## @param tls.admin.certManager.issuerGroup Issuer group (optional), defaults to `certManager.issuerGroup` if empty
    ## @param tls.admin.certManager.issuerKind Issuer kind (optional), defaults to `certManager.issuerKind` if empty
    ## @param tls.admin.certManager.issuerName Issuer name
    ##
    certManager:
      issuerGroup: ""
      issuerKind: ""
      issuerName: ""
    ## @param tls.admin.ca CA certificate, if empty `""` JVM default trust store is used
    ## @param tls.admin.chain Certificate chain
    ## @param tls.admin.key Certificate private key (PKCS-8)
    ##
    ca: "/tls-admin/ca.crt"
    chain: "/tls-admin/tls.crt"
    key: "/tls-admin/tls.key"
    ## @param tls.admin.minimumServerProtocolVersion Minimum version allowed: `TLSv1.2` or `TLSv1.3`. If empty `""` JVM defaults are used [[documentation]](https://www.java.com/en/configure_crypto.html)
    ## @param tls.admin.ciphers Specify ciphers allowed, if empty `""` JVM defaults are used [[documentation]](https://www.java.com/en/configure_crypto.html)
    ## Configuration recommended by Mozilla: https://wiki.mozilla.org/Security/Server_Side_TLS
    ##
    minimumServerProtocolVersion: "TLSv1.3"
    ciphers:
      - "TLS_AES_128_GCM_SHA256"
      - "TLS_AES_256_GCM_SHA384"
      - "TLS_CHACHA20_POLY1305_SHA256"

## @section mTLS configuration

mtls:
  public:
    ## @param mtls.public.enabled Define whether clients need to authenticate as well using mTLS
    ##
    enabled: false
    ## @extra mtls.public.certManager Cert-manager CSI driver configuration (only used when TLS is enabled and `issuerName` is defined), will automatically mount certificates in folder `/mtls-public`
    ## @param mtls.public.certManager.issuerGroup Issuer group (optional), defaults to `certManager.issuerGroup` if empty
    ## @param mtls.public.certManager.issuerKind Issuer kind (optional), defaults to `certManager.issuerKind` if empty
    ## @param mtls.public.certManager.issuerName Issuer name
    ##
    certManager:
      issuerGroup: ""
      issuerKind: ""
      issuerName: ""
    ## @param mtls.public.ca CA certificate, if empty `""` JVM default trust store is used
    ## @param mtls.public.chain Certificate chain
    ## @param mtls.public.key Certificate private key (PKCS-8)
    ##
    ca: "/mtls-public/ca.crt"
    chain: "/mtls-public/tls.crt"
    key: "/mtls-public/tls.key"
  admin:
    ## @param mtls.admin.enabled Define whether clients need to authenticate as well using mTLS
    ##
    enabled: false
    ## @extra mtls.admin.certManager Cert-manager CSI driver configuration (only used when TLS is enabled and `issuerName` is defined), will automatically mount certificates in folder `/mtls-admin`
    ## @param mtls.admin.certManager.issuerGroup Issuer group (optional), defaults to `certManager.issuerGroup` if empty
    ## @param mtls.admin.certManager.issuerKind Issuer kind (optional), defaults to `certManager.issuerKind` if empty
    ## @param mtls.admin.certManager.issuerName Issuer name
    ##
    certManager:
      issuerGroup: ""
      issuerKind: ""
      issuerName: ""
    ## @param mtls.admin.ca CA certificate, if empty `""` JVM default trust store is used
    ## @param mtls.admin.chain Certificate chain
    ## @param mtls.admin.key Certificate private key (PKCS-8)
    ##
    ca: "/mtls-admin/ca.crt"
    chain: "/mtls-admin/tls.crt"
    key: "/mtls-admin/tls.key"

## @section Authentication configuration

## @param authServices.enabled Enabled JWT authentication
## @param authServices.type Type of authorization. Allowed values: `jwt-rs-256-jwks`, `jwt-rs-256-crt`, `jwt-es-256-crt`, `jwt-es-512-crt`
## @param authServices.url URL to JWKS (only used for type `jwt-rs-256-jwks`)
## @param authServices.certificate Path to certificate used to sign JWTs (only used for types `jwt-rs-256-crt`, `jwt-es-256-crt`, `jwt-es-512-crt`)
## @param authServices.targetAudience Custom JWT token audience
## @param authServices.additionalAdminUserId Additional Ledger admin user, the default `participant_admin` (created at startup)
##
authServices:
  enabled: false
  type: "jwt-rs-256-jwks"
  url: "https://mydomain.com/auth/jwks.json"
  certificate: "/path/to/jwt.crt"
  targetAudience: ""
  additionalAdminUserId: ""

## @section Container ports

## @param ports.public Ledger API container port (gRPC)
## @param ports.admin Admin API container port (gRPC)
## @param ports.health Health check port for gRPC liveness and readiness probes, not exposed (TLS always disabled)
## @param ports.metrics Promotheus exporter container port (HTTP)
##
ports:
  public: 4001
  admin: 4002
  health: 4003
  metrics: 8081

## @section Deployment configuration

## @extra environment Container environment variables
## @param environment.JDK_JAVA_OPTIONS Java launcher environment variable
## @param environmentSecrets Container secret environment variables
##
environment:
  JDK_JAVA_OPTIONS: "-XX:+ExitOnOutOfMemoryError -XX:InitialRAMPercentage=70 -XX:MaxRAMPercentage=70"
environmentSecrets: {}

## @param deployment.annotations Deployment extra annotations
## @param deployment.labels Deployment extra labels
## Deployment strategy is locked to "Recreate", Participant is using active/passive HA
## which is incompatible with Kubernetes => we run only one pod at a time
##
deployment:
  annotations: {}
  labels: {}

pod:
  ## @param pod.annotations Extra annotations for Deployment pods
  ## @param pod.labels Extra labels for Deployment pods
  ##
  annotations: {}
  labels: {}
  ## @param pod.securityContext.enabled Enable pods Security Context
  ## @param pod.securityContext.fsGroup Special supplemental GID that applies to all containers in a pod
  ## @param pod.securityContext.fsGroupChangePolicy Defines behavior of changing ownership and permission of the volume before being exposed inside pods. Valid values are `OnRootMismatch` and `Always`
  ## @param pod.securityContext.sysctls List of namespaced sysctls used for the pod
  ##
  securityContext:
    enabled: true
    fsGroup: 65532
    fsGroupChangePolicy: "Always"
    sysctls: []

## @param securityContext.enabled Enable containers Security Context
## @param securityContext.readOnlyRootFilesystem Whether this container has a read-only root filesystem
## @param securityContext.runAsGroup The GID to run the entrypoint of the container process
## @param securityContext.runAsNonRoot Indicates that the container must run as a non-root user
## @param securityContext.runAsUser The UID to run the entrypoint of the container process
##
securityContext:
  enabled: true
  readOnlyRootFilesystem: false
  runAsGroup: 65532
  runAsNonRoot: true
  runAsUser: 65532

## @param affinity Affinity for pods assignment
## @param nodeSelector Node labels for pods assignment
## @extra resources Resources requests/limits for Canton container
## @param tolerations Tolerations for pods assignment
##
affinity: {}
nodeSelector: {}
resources:
  ## @skip resources.requests.cpu
  ## @skip resources.limits.cpu
  ## @skip resources.limits.memory
  requests:
    cpu: 500m
  limits:
    cpu: 2
    memory: 3Gi
tolerations: []

## @param livenessProbe Override `livenessProbe` default configuration
## @param readinessProbe Override `readinessProbe` default configuration
##
livenessProbe: {}
readinessProbe: {}

## @param extraVolumeMounts Specify extra list of additional volumeMounts for participant container
## @param extraVolumes Specify extra list of additional volumes for participant pod
##
extraVolumeMounts: []
extraVolumes: []

## @section Service configuration

## @param service.type Service type. Allowed values: `ExternalName`, `ClusterIP`, `NodePort`, `LoadBalance`
## @param service.annotations Service extra annotations
## @param service.labels Service extra labels
## @param service.ports.public Ledger API service port (gRPC)
## @param service.ports.admin Admin API service port (gRPC)
## @param service.ports.metrics Promotheus exporter service port (HTTP)
##
service:
  type: ClusterIP
  annotations: {}
  labels: {}
  ports:
    public: 4001
    admin: 4002
    metrics: 8081

## @section Ingress configuration

## @param ingress.enabled Enable ingress to participant service port `public`, aka the Ledger API (gRPC)
## @param ingress.annotations Ingress extra annotations
## @param ingress.labels Ingress extra labels
## @param ingress.className Set `ingressClassName` on the ingress record
## @param ingress.host Default host for the ingress resource (DNS record to cluster load balancer)
## @param ingress.path Path to participant Ledger API
## @param ingress.pathType Determines the interpretation of the `Path` matching.  Allowed values: `Exact`, `Prefix`, `ImplementationSpecific`
## @param ingress.tls Enable TLS configuration for `hostname`
##
ingress:
  enabled: false
  annotations: {}
  labels: {}
  className: ""
  host: ""
  path: "/"
  pathType: "Prefix"
  tls: []

## @section Traefik IngressRouteTCP configuration

## @param ingressRouteTCP.enabled Enable Traefik `IngressRouteTCP` (CRD) to participant service port `public`, aka the Ledger API (gRPC)
## @param ingressRouteTCP.annotations IngressRouteTCP extra annotations
## @param ingressRouteTCP.labels IngressRouteTCP extra labels
## @param ingressRouteTCP.entryPoints Traefik entrypoints for this IngressRouteTCP. Available by default: `web` (port 80), `websecure` (port 443)
## @param ingressRouteTCP.hostSNI DNS record to cluster load balancer
## @param ingressRouteTCP.tls Define TLS certificate configuration
##
ingressRouteTCP:
  enabled: false
  annotations: {}
  labels: {}
  entryPoints:
    - websecure
  hostSNI: ""
  tls: {}

## @section Service Account and RBAC configuration

## @param serviceAccount.create Enable creation of service accounts for pod(s)
## @param serviceAccount.annotations Service Account extra annotations
## @param serviceAccount.labels Service Account extra labels
## @param serviceAccount.automountServiceAccountToken API token automatically mounted into pods using this ServiceAccount. Set to `false` if pods do not use the K8s API
## @param serviceAccount.extraSecrets List of extra secrets allowed to be used by pods running using this ServiceAccount
##
serviceAccount:
  create: true
  annotations: {}
  labels: {}
  automountServiceAccountToken: false
  extraSecrets: []
## @param rbac.create Enable creation of RBAC resources attached to the service accounts
## @param rbac.rules Custom RBAC rules to set
##
rbac:
  create: true
  rules: []

## @section Monitoring configuration

metrics:
  ## @param metrics.enabled Enable Prometheus metrics endpoint
  ##
  enabled: false
  ## @param metrics.podMonitor.enabled Creates a Prometheus Operator PodMonitor (also requires `metrics.enabled` to be `true`)
  ## @param metrics.podMonitor.labels Pod Monitor extra labels
  ## @param metrics.podMonitor.jobLabel The label to use to retrieve the job name from
  ## @param metrics.podMonitor.podTargetLabels PodTargetLabels transfers labels on the Kubernetes Pod onto the target
  ## @param metrics.podMonitor.extraPodMetricsEndpoints Extra scrapeable endpoint configuration
  ## @param metrics.podMonitor.sampleLimit Per-scrape limit on number of scraped samples that will be accepted
  ## @param metrics.podMonitor.targetLimit Limit on the number of scraped targets that will be accepted
  ## @param metrics.podMonitor.labelLimit Per-scrape limit on number of labels that will be accepted for a sample (Prometheus versions 2.27 and newer)
  ## @param metrics.podMonitor.labelNameLengthLimit Per-scrape limit on length of labels name that will be accepted for a sample (Prometheus versions 2.27 and newer)
  ## @param metrics.podMonitor.labelValueLengthLimit Per-scrape limit on length of labels value that will be accepted for a sample (Prometheus versions 2.27 and newer)
  ##
  podMonitor:
    enabled: false
    labels: {}
    jobLabel: ""
    podTargetLabels: []
    extraPodMetricsEndpoints: []
    sampleLimit: 0
    targetLimit: 0
    labelLimit: 0
    labelNameLengthLimit: 0
    labelValueLengthLimit: 0

## @section Automated testing configuration (do not use in production)

testing:
  bootstrap:
    ## @param testing.bootstrap.automaticDomainRegistration Automatically adds the participant in the domain allow-list.
    automaticDomainRegistration: false
    ## @extra testing.bootstrap.remoteDomainManager Remote domain manager connection configuration
    remoteDomainManager:
      ## @param testing.bootstrap.remoteDomainManager.host Domain manager host
      ## @param testing.bootstrap.remoteDomainManager.port Domain manager port
      host: ""
      port: 4801
      tls:
        ## @param testing.bootstrap.remoteDomainManager.tls.enabled Enable TLS to Domain manager
        ##
        enabled: false
        ## @extra testing.bootstrap.remoteDomainManager.tls.certManager Cert-manager CSI driver configuration (only used if TLS is enabled and `issuerName` is defined), will automatically mount certificates in folder `/tls-domain-manager`
        ## @param testing.bootstrap.remoteDomainManager.tls.certManager.issuerGroup Issuer group (optional), defaults to `certManager.issuerGroup` if empty
        ## @param testing.bootstrap.remoteDomainManager.tls.certManager.issuerKind Issuer kind (optional), defaults to `certManager.issuerKind` if empty
        ## @param testing.bootstrap.remoteDomainManager.tls.certManager.issuerName Issuer name
        ##
        certManager:
          issuerGroup: ""
          issuerKind: ""
          issuerName: ""
        ## @param testing.bootstrap.remoteDomainManager.tls.ca CA certificate, if empty `""` JVM default trust store is used
        ##
        ca: "/tls-domain-manager/ca.crt"
      mtls:
        ## @param testing.bootstrap.remoteDomainManager.mtls.enabled Enable mTLS to Domain manager
        ##
        enabled: false
        ## @extra testing.bootstrap.remoteDomainManager.mtls.certManager Cert-manager CSI driver configuration (only used if TLS is enabled and `issuerName` is defined), will automatically mount certificates in folder `/mtls-domain-manager`
        ## @param testing.bootstrap.remoteDomainManager.mtls.certManager.issuerGroup Issuer group (optional), defaults to `certManager.issuerGroup` if empty
        ## @param testing.bootstrap.remoteDomainManager.mtls.certManager.issuerKind Issuer kind (optional), defaults to `certManager.issuerKind` if empty
        ## @param testing.bootstrap.remoteDomainManager.mtls.certManager.issuerName Issuer name
        ##
        certManager:
          issuerGroup: ""
          issuerKind: ""
          issuerName: ""
        ## @param testing.bootstrap.remoteDomainManager.mtls.chain Certificate chain
        ## @param testing.bootstrap.remoteDomainManager.mtls.key Certificate private key (PKCS-8)
        chain: "/mtls-domain-manager/tls.crt"
        key: "/mtls-domain-manager/tls.key"
